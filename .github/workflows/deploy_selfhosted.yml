name: deploy_selfhosted
on:
  workflow_dispatch: # This event allows manual triggering
jobs:
  build-and-deploy:
    runs-on: arhitectvirt
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Check if the workflow is running on the 'staging_configs' branch in PowerShell
    # - name: Ensure running on 'staging_configs' branch
    #   run: |
    #     if ($env:GITHUB_REF -ne 'refs/heads/staging_configs') {
    #       Write-Host "This workflow can only run on the 'staging_configs' branch."
    #       exit 1
    #     }
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
        
    - name: Install .NET dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --configuration Debug --no-restore
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x' # Ensures Node.js >= 20.0.0
        cache: 'npm'
        
    - name: Install npm dependencies and run postinstall
      run: npm install
      working-directory: ./MainApp.MVC
      
    - name: Add delay to ensure filesystem sync
      run: Start-Sleep -Seconds 25
      
    - name: Publish
      run: |
        $env:ASPNETCORE_ENVIRONMENT = "Staging"
        dotnet publish --output publish_output `
          -p:PublishProfile=Staging `
          -p:EnvironmentName=Staging `
          /p:EnvironmentName=Staging
      
    - name: Copy vendor directory to publish output
      run: |        
        if (-Not (Test-Path -Path "./MainApp.MVC/wwwroot/vendor")) {
          echo "Source directory ./MainApp.MVC/wwwroot/vendor does not exist."
          exit 1
        }
        if (-Not (Test-Path -Path "./publish_output/wwwroot/vendor")) {
          New-Item -ItemType Directory -Force -Path "./publish_output/wwwroot/vendor"
        }
        Copy-Item -Path "./MainApp.MVC/wwwroot/vendor\*" -Destination "./publish_output/wwwroot/vendor" -Recurse -Force
        
    # - name: Stop App Pool
    #  run: Stop-WebAppPool -Name "WasteSniffer"

    - name: Clear destination folder
      run: |
        if (Test-Path -Path "C:\continous_delivery\waste_detection_platform") {
          Remove-Item -Path "C:\continous_delivery\waste_detection_platform\*" -Recurse -Force
        }
        
    - name: Deploy to folder
      run: |
        if (-Not (Test-Path -Path "C:\continous_delivery\waste_detection_platform")) {
          New-Item -ItemType Directory -Force -Path "C:\continous_delivery\waste_detection_platform"
        }
        Copy-Item -Path "publish_output\*" -Destination "C:\continous_delivery\waste_detection_platform" -Recurse -Force

    - name: Run Migrations and Seed Database
      run: |
        # Set environment variable for the process
        $env:ASPNETCORE_ENVIRONMENT = "Staging"

        # Create a temporary file to capture all output
        $outputFile = "output.log"
        $errorFile = "error.log"
    
        # Start the process with output redirection
        $process = Start-Process -FilePath "dotnet" `
          -ArgumentList "./MainApp.MVC.dll", "/seed", "/runMigrations", "/module:MMDetectionSetup" `
          -WorkingDirectory "C:/continous_delivery/waste_detection_platform" `
          -RedirectStandardOutput $outputFile `
          -RedirectStandardError $errorFile `
          -NoNewWindow -PassThru
    
        # Wait for either completion or error
        while (!$process.HasExited) {
          Start-Sleep -Seconds 1
      
          # Check for success message
          if (Select-String -Path $outputFile -Pattern "Done seeding database." -Quiet) {
            Stop-Process -Id $process.Id -Force
            Get-Content $outputFile
            Write-Host "Seeding completed successfully!"
            exit 0
          }
      
          # Check for error messages
          if ((Get-Content $errorFile) -or (Select-String -Path $outputFile -Pattern "Error|Exception|Failed" -Quiet)) {
            Stop-Process -Id $process.Id -Force
            Write-Host "Errors found during seeding:"
            Get-Content $errorFile
            Get-Content $outputFile
            exit 1  # This will fail the GitHub Action step
          }
        }
    
        # Final check of process exit code
        if ($process.ExitCode -ne 0) {
          Write-Host "Process failed with exit code: $($process.ExitCode)"
          Get-Content $errorFile
          Get-Content $outputFile
          exit 1
        }
      
    # - name: Start App Pool
    #   run: Start-WebAppPool -Name "WasteSniffer"
    - name: Notify success
      if: success()
      run: |
        echo "Deployment to C:\continous_delivery\waste_sniffer was successful!"
        
    - name: Notify failure
      if: failure()
      run: |
        echo "Deployment to C:\continous_delivery\waste_sniffer failed."
