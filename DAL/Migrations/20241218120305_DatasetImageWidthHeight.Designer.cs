// <auto-generated />
using System;
using DAL.ApplicationStorage;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241218120305_DatasetImageWidthHeight")]
    partial class DatasetImageWidthHeight
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.ApplicationSettings", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<int>("DataType")
                        .HasColumnType("integer")
                        .HasColumnName("data_type");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Module")
                        .HasColumnType("text")
                        .HasColumnName("module");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("pk_application_settings");

                    b.ToTable("application_settings");
                });

            modelBuilder.Entity("Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("asp_net_users", (string)null);
                });

            modelBuilder.Entity("Entities.AuditLog", b =>
                {
                    b.Property<long>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("audit_log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AuditLogId"));

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("audit_action");

                    b.Property<string>("AuditData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("audit_data");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("audit_date");

                    b.Property<string>("AuditInternalUser")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("audit_internal_user");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_type");

                    b.Property<string>("TablePk")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table_pk");

                    b.HasKey("AuditLogId")
                        .HasName("pk_audit_log");

                    b.ToTable("audit_log");
                });

            modelBuilder.Entity("Entities.DatasetEntities.Dataset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool?>("AnnotationsPerSubclass")
                        .HasColumnType("boolean")
                        .HasColumnName("annotations_per_subclass");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_published");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentDatasetId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_dataset_id");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_datasets");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentDatasetId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("datasets");
                });

            modelBuilder.Entity("Entities.DatasetEntities.DatasetClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("class_name");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid?>("ParentClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_class_id");

                    b.HasKey("Id")
                        .HasName("pk_dataset_classes");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ParentClassId");

                    b.ToTable("dataset_classes");
                });

            modelBuilder.Entity("Entities.DatasetEntities.DatasetImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid?>("DatasetId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ThumbnailPath")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_path");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_dataset_images");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DatasetId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("dataset_images");
                });

            modelBuilder.Entity("Entities.DatasetEntities.Dataset_DatasetClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DatasetClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_class_id");

                    b.Property<int>("DatasetClassValue")
                        .HasColumnType("integer")
                        .HasColumnName("dataset_class_value");

                    b.Property<Guid>("DatasetId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_id");

                    b.HasKey("Id")
                        .HasName("pk_datasets_dataset_classes");

                    b.HasIndex("DatasetClassId");

                    b.HasIndex("DatasetId");

                    b.ToTable("datasets_dataset_classes");
                });

            modelBuilder.Entity("Entities.DatasetEntities.ImageAnnotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid?>("DatasetClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_class_id");

                    b.Property<Guid?>("DatasetImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_image_id");

                    b.Property<Polygon>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry(Polygon)")
                        .HasColumnName("geom");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_enabled");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_image_annotations");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DatasetClassId");

                    b.HasIndex("DatasetImageId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("image_annotations");
                });

            modelBuilder.Entity("Entities.DetectionEntities.DetectedDumpSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("ConfidenceRate")
                        .IsRequired()
                        .HasColumnType("double precision")
                        .HasColumnName("confidence_rate");

                    b.Property<Guid>("DatasetClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_class_id");

                    b.Property<Guid>("DetectionRunId")
                        .HasColumnType("uuid")
                        .HasColumnName("detection_run_id");

                    b.Property<Polygon>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry(Polygon)")
                        .HasColumnName("geom");

                    b.HasKey("Id")
                        .HasName("pk_detected_dump_sites");

                    b.HasIndex("DatasetClassId");

                    b.HasIndex("DetectionRunId");

                    b.ToTable("detected_dump_sites");
                });

            modelBuilder.Entity("Entities.DetectionEntities.DetectionIgnoreZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Polygon>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry(Polygon)")
                        .HasColumnName("geom");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_detection_ignore_zones");

                    b.HasIndex("CreatedById");

                    b.ToTable("detection_ignore_zones");
                });

            modelBuilder.Entity("Entities.DetectionEntities.DetectionInputImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTime>("DateTaken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_taken")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_file_name");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_detection_input_images");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("detection_input_images");
                });

            modelBuilder.Entity("Entities.DetectionEntities.DetectionRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("DetectionInputImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("detection_input_image_id");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("TrainedModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("trained_model_id");

                    b.HasKey("Id")
                        .HasName("pk_detection_runs");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DetectionInputImageId");

                    b.HasIndex("TrainedModelId");

                    b.ToTable("detection_runs");
                });

            modelBuilder.Entity("Entities.IntranetPortalUsersToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("application_user_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<bool>("isTokenUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_token_used");

                    b.HasKey("ID")
                        .HasName("pk_intranet_portal_users_tokens");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("intranet_portal_users_tokens");
                });

            modelBuilder.Entity("Entities.LegalLandfillsManagementEntites.LegalLandfill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_legal_landfills");

                    b.ToTable("legal_landfills");
                });

            modelBuilder.Entity("Entities.LegalLandfillsManagementEntites.LegalLandfillPointCloudFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<Guid>("LegalLandfillId")
                        .HasColumnType("uuid")
                        .HasColumnName("legal_landfill_id");

                    b.Property<DateTime>("ScanDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scan_date_time")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.HasKey("Id")
                        .HasName("pk_legal_landfill_point_cloud_files");

                    b.HasIndex("LegalLandfillId");

                    b.ToTable("legal_landfill_point_cloud_files");
                });

            modelBuilder.Entity("Entities.LegalLandfillsManagementEntites.LegalLandfillTruck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("Capacity")
                        .HasColumnType("double precision")
                        .HasColumnName("capacity");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double?>("PayloadWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("payload_weight");

                    b.Property<string>("Registration")
                        .HasColumnType("text")
                        .HasColumnName("registration");

                    b.Property<double?>("UnladenWeight")
                        .HasColumnType("double precision")
                        .HasColumnName("unladen_weight");

                    b.HasKey("Id")
                        .HasName("pk_legal_landfill_trucks");

                    b.ToTable("legal_landfill_trucks");
                });

            modelBuilder.Entity("Entities.LegalLandfillsManagementEntites.LegalLandfillWasteImport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("Capacity")
                        .HasColumnType("double precision")
                        .HasColumnName("capacity");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<int>("ImportExportStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("import_export_status");

                    b.Property<DateTime>("ImportedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("imported_on");

                    b.Property<Guid>("LegalLandfillId")
                        .HasColumnType("uuid")
                        .HasColumnName("legal_landfill_id");

                    b.Property<Guid?>("LegalLandfillTruckId")
                        .HasColumnType("uuid")
                        .HasColumnName("legal_landfill_truck_id");

                    b.Property<Guid>("LegalLandfillWasteTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("legal_landfill_waste_type_id");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("pk_legal_landfill_waste_imports");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LegalLandfillId");

                    b.HasIndex("LegalLandfillTruckId");

                    b.HasIndex("LegalLandfillWasteTypeId");

                    b.ToTable("legal_landfill_waste_imports");
                });

            modelBuilder.Entity("Entities.LegalLandfillsManagementEntites.LegalLandfillWasteType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_legal_landfill_waste_types");

                    b.ToTable("legal_landfill_waste_types");
                });

            modelBuilder.Entity("Entities.MapConfigurationEntities.MapConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("CenterX")
                        .HasColumnType("double precision")
                        .HasColumnName("center_x");

                    b.Property<double>("CenterY")
                        .HasColumnType("double precision")
                        .HasColumnName("center_y");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<double>("DefaultResolution")
                        .HasColumnType("double precision")
                        .HasColumnName("default_resolution");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("map_name");

                    b.Property<double>("MaxX")
                        .HasColumnType("double precision")
                        .HasColumnName("max_x");

                    b.Property<double>("MaxY")
                        .HasColumnType("double precision")
                        .HasColumnName("max_y");

                    b.Property<double>("MinX")
                        .HasColumnType("double precision")
                        .HasColumnName("min_x");

                    b.Property<double>("MinY")
                        .HasColumnType("double precision")
                        .HasColumnName("min_y");

                    b.Property<string>("Projection")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("projection");

                    b.Property<string>("Resolutions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("resolutions");

                    b.Property<string>("TileGridJs")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tile_grid_js");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_map_configurations");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("map_configurations");
                });

            modelBuilder.Entity("Entities.MapConfigurationEntities.MapLayerConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("LayerDescriptionJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("layer_description_json");

                    b.Property<string>("LayerJs")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("layer_js");

                    b.Property<string>("LayerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("layer_name");

                    b.Property<string>("LayerTitleJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("layer_title_json");

                    b.Property<Guid?>("MapConfigurationId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_configuration_id");

                    b.Property<Guid?>("MapLayerGroupConfigurationId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_layer_group_configuration_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_map_layer_configurations");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MapConfigurationId");

                    b.HasIndex("MapLayerGroupConfigurationId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("map_layer_configurations");
                });

            modelBuilder.Entity("Entities.MapConfigurationEntities.MapLayerGroupConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("GroupJs")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_js");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group_name");

                    b.Property<string>("LayerGroupDescriptionJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("layer_group_description_json");

                    b.Property<string>("LayerGroupTitleJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("layer_group_title_json");

                    b.Property<Guid?>("MapConfigurationId")
                        .HasColumnType("uuid")
                        .HasColumnName("map_configuration_id");

                    b.Property<double>("Opacity")
                        .HasColumnType("double precision")
                        .HasColumnName("opacity");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("UpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_id");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on");

                    b.HasKey("Id")
                        .HasName("pk_map_layer_group_configurations");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MapConfigurationId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("map_layer_group_configurations");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainedModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BaseModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_model_id");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid>("DatasetId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_id");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_published");

                    b.Property<string>("ModelConfigPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_config_path");

                    b.Property<string>("ModelFilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model_file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("TrainedModelStatisticsId")
                        .HasColumnType("uuid")
                        .HasColumnName("trained_model_statistics_id");

                    b.Property<Guid?>("TrainingRunId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_run_id");

                    b.HasKey("Id")
                        .HasName("pk_trained_models");

                    b.HasIndex("BaseModelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DatasetId");

                    b.HasIndex("TrainingRunId")
                        .IsUnique();

                    b.ToTable("trained_models");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainedModelStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("AvgBoxLoss")
                        .HasColumnType("double precision")
                        .HasColumnName("avg_box_loss");

                    b.Property<double?>("LearningRate")
                        .HasColumnType("double precision")
                        .HasColumnName("learning_rate");

                    b.Property<double?>("NumEpochs")
                        .HasColumnType("double precision")
                        .HasColumnName("num_epochs");

                    b.Property<int?>("TotalParameters")
                        .HasColumnType("integer")
                        .HasColumnName("total_parameters");

                    b.Property<Guid>("TrainedModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("trained_model_id");

                    b.Property<TimeSpan?>("TrainingDuration")
                        .HasColumnType("interval")
                        .HasColumnName("training_duration");

                    b.Property<double?>("mApp")
                        .HasColumnType("double precision")
                        .HasColumnName("m_app");

                    b.HasKey("Id")
                        .HasName("pk_trained_model_statistics");

                    b.HasIndex("TrainedModelId")
                        .IsUnique();

                    b.ToTable("trained_model_statistics");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainingRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BaseModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_model_id");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<Guid>("DatasetId")
                        .HasColumnType("uuid")
                        .HasColumnName("dataset_id");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid?>("TrainParamsId")
                        .HasColumnType("uuid")
                        .HasColumnName("train_params_id");

                    b.Property<Guid?>("TrainedModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("trained_model_id");

                    b.HasKey("Id")
                        .HasName("pk_training_runs");

                    b.HasIndex("BaseModelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DatasetId");

                    b.ToTable("training_runs");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainingRunTrainParams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("BatchSize")
                        .HasColumnType("integer")
                        .HasColumnName("batch_size");

                    b.Property<int?>("NumEpochs")
                        .HasColumnType("integer")
                        .HasColumnName("num_epochs");

                    b.Property<int?>("NumFrozenStages")
                        .HasColumnType("integer")
                        .HasColumnName("num_frozen_stages");

                    b.Property<Guid>("TrainingRunId")
                        .HasColumnType("uuid")
                        .HasColumnName("training_run_id");

                    b.HasKey("Id")
                        .HasName("pk_training_run_train_params");

                    b.HasIndex("TrainingRunId")
                        .IsUnique();

                    b.ToTable("training_run_train_params");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("asp_net_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId");

                    b.ToTable("asp_net_role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId");

                    b.ToTable("asp_net_user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId");

                    b.ToTable("asp_net_user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId");

                    b.ToTable("asp_net_user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("asp_net_user_tokens", (string)null);
                });

            modelBuilder.Entity("Entities.DatasetEntities.Dataset", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_datasets_asp_net_users_created_by_id");

                    b.HasOne("Entities.DatasetEntities.Dataset", "ParentDataset")
                        .WithMany()
                        .HasForeignKey("ParentDatasetId")
                        .HasConstraintName("fk_datasets_datasets_parent_dataset_id");

                    b.HasOne("Entities.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_datasets_asp_net_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("ParentDataset");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Entities.DatasetEntities.DatasetClass", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dataset_classes_asp_net_users_created_by_id");

                    b.HasOne("Entities.DatasetEntities.DatasetClass", "ParentClass")
                        .WithMany()
                        .HasForeignKey("ParentClassId")
                        .HasConstraintName("fk_dataset_classes_dataset_classes_parent_class_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("ParentClass");
                });

            modelBuilder.Entity("Entities.DatasetEntities.DatasetImage", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dataset_images_asp_net_users_created_by_id");

                    b.HasOne("Entities.DatasetEntities.Dataset", "Dataset")
                        .WithMany("DatasetImages")
                        .HasForeignKey("DatasetId")
                        .HasConstraintName("fk_dataset_images_datasets_dataset_id");

                    b.HasOne("Entities.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_dataset_images_asp_net_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Dataset");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Entities.DatasetEntities.Dataset_DatasetClass", b =>
                {
                    b.HasOne("Entities.DatasetEntities.DatasetClass", "DatasetClass")
                        .WithMany("Datasets")
                        .HasForeignKey("DatasetClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_datasets_dataset_classes_dataset_classes_dataset_class_id");

                    b.HasOne("Entities.DatasetEntities.Dataset", "Dataset")
                        .WithMany("DatasetClasses")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_datasets_dataset_classes_datasets_dataset_id");

                    b.Navigation("Dataset");

                    b.Navigation("DatasetClass");
                });

            modelBuilder.Entity("Entities.DatasetEntities.ImageAnnotation", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_image_annotations_asp_net_users_created_by_id");

                    b.HasOne("Entities.DatasetEntities.DatasetClass", "DatasetClass")
                        .WithMany()
                        .HasForeignKey("DatasetClassId")
                        .HasConstraintName("fk_image_annotations_dataset_classes_dataset_class_id");

                    b.HasOne("Entities.DatasetEntities.DatasetImage", "DatasetImage")
                        .WithMany("ImageAnnotations")
                        .HasForeignKey("DatasetImageId")
                        .HasConstraintName("fk_image_annotations_dataset_images_dataset_image_id");

                    b.HasOne("Entities.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_image_annotations_asp_net_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DatasetClass");

                    b.Navigation("DatasetImage");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Entities.DetectionEntities.DetectedDumpSite", b =>
                {
                    b.HasOne("Entities.DatasetEntities.DatasetClass", "DatasetClass")
                        .WithMany()
                        .HasForeignKey("DatasetClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_detected_dump_sites_dataset_classes_dataset_class_id");

                    b.HasOne("Entities.DetectionEntities.DetectionRun", "DetectionRun")
                        .WithMany("DetectedDumpSites")
                        .HasForeignKey("DetectionRunId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_detected_dump_sites_detection_runs_detection_run_id");

                    b.Navigation("DatasetClass");

                    b.Navigation("DetectionRun");
                });

            modelBuilder.Entity("Entities.DetectionEntities.DetectionIgnoreZone", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_detection_ignore_zones_asp_net_users_created_by_id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Entities.DetectionEntities.DetectionInputImage", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_detection_input_images_asp_net_users_created_by_id");

                    b.HasOne("Entities.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_detection_input_images_asp_net_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Entities.DetectionEntities.DetectionRun", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_detection_runs_asp_net_users_created_by_id");

                    b.HasOne("Entities.DetectionEntities.DetectionInputImage", "DetectionInputImage")
                        .WithMany()
                        .HasForeignKey("DetectionInputImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_detection_runs_detection_input_images_detection_input_image~");

                    b.HasOne("Entities.TrainingEntities.TrainedModel", "TrainedModel")
                        .WithMany()
                        .HasForeignKey("TrainedModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_detection_runs_trained_models_trained_model_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DetectionInputImage");

                    b.Navigation("TrainedModel");
                });

            modelBuilder.Entity("Entities.IntranetPortalUsersToken", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "ApplicationUsers")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_intranet_portal_users_tokens_asp_net_users_application_user~");

                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("Entities.LegalLandfillsManagementEntites.LegalLandfillPointCloudFile", b =>
                {
                    b.HasOne("Entities.LegalLandfillsManagementEntites.LegalLandfill", "LegalLandfill")
                        .WithMany("LegalLandfillPointCloudFiles")
                        .HasForeignKey("LegalLandfillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_legal_landfill_point_cloud_files_legal_landfills_legal_land~");

                    b.Navigation("LegalLandfill");
                });

            modelBuilder.Entity("Entities.LegalLandfillsManagementEntites.LegalLandfillWasteImport", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_legal_landfill_waste_imports_asp_net_users_created_by_id");

                    b.HasOne("Entities.LegalLandfillsManagementEntites.LegalLandfill", "LegalLandfill")
                        .WithMany()
                        .HasForeignKey("LegalLandfillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_legal_landfill_waste_imports_legal_landfills_legal_landfill~");

                    b.HasOne("Entities.LegalLandfillsManagementEntites.LegalLandfillTruck", "LegalLandfillTruck")
                        .WithMany()
                        .HasForeignKey("LegalLandfillTruckId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_legal_landfill_waste_imports_legal_landfill_trucks_legal_la~");

                    b.HasOne("Entities.LegalLandfillsManagementEntites.LegalLandfillWasteType", "LegalLandfillWasteType")
                        .WithMany()
                        .HasForeignKey("LegalLandfillWasteTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_legal_landfill_waste_imports_legal_landfill_waste_types_legal_~");

                    b.Navigation("CreatedBy");

                    b.Navigation("LegalLandfill");

                    b.Navigation("LegalLandfillTruck");

                    b.Navigation("LegalLandfillWasteType");
                });

            modelBuilder.Entity("Entities.MapConfigurationEntities.MapConfiguration", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_map_configurations_asp_net_users_created_by_id");

                    b.HasOne("Entities.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_map_configurations_asp_net_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Entities.MapConfigurationEntities.MapLayerConfiguration", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_map_layer_configurations_asp_net_users_created_by_id");

                    b.HasOne("Entities.MapConfigurationEntities.MapConfiguration", "MapConfiguration")
                        .WithMany("MapLayerConfigurations")
                        .HasForeignKey("MapConfigurationId")
                        .HasConstraintName("fk_map_layer_configurations_map_configurations_map_configurati~");

                    b.HasOne("Entities.MapConfigurationEntities.MapLayerGroupConfiguration", "MapLayerGroupConfiguration")
                        .WithMany("MapLayerConfigurations")
                        .HasForeignKey("MapLayerGroupConfigurationId")
                        .HasConstraintName("fk_map_layer_configurations_map_layer_group_configurations_map_la~");

                    b.HasOne("Entities.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_map_layer_configurations_asp_net_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("MapConfiguration");

                    b.Navigation("MapLayerGroupConfiguration");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Entities.MapConfigurationEntities.MapLayerGroupConfiguration", b =>
                {
                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_map_layer_group_configurations_asp_net_users_created_by_id");

                    b.HasOne("Entities.MapConfigurationEntities.MapConfiguration", "MapConfiguration")
                        .WithMany("MapLayerGroupConfigurations")
                        .HasForeignKey("MapConfigurationId")
                        .HasConstraintName("fk_map_layer_group_configurations_map_configurations_map_confi~");

                    b.HasOne("Entities.ApplicationUser", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_map_layer_group_configurations_asp_net_users_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("MapConfiguration");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainedModel", b =>
                {
                    b.HasOne("Entities.TrainingEntities.TrainedModel", "BaseModel")
                        .WithMany()
                        .HasForeignKey("BaseModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_trained_models_trained_models_base_model_id");

                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_trained_models_asp_net_users_created_by_id");

                    b.HasOne("Entities.DatasetEntities.Dataset", "Dataset")
                        .WithMany()
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_trained_models_datasets_dataset_id");

                    b.HasOne("Entities.TrainingEntities.TrainingRun", "TrainingRun")
                        .WithOne("TrainedModel")
                        .HasForeignKey("Entities.TrainingEntities.TrainedModel", "TrainingRunId");

                    b.Navigation("BaseModel");

                    b.Navigation("CreatedBy");

                    b.Navigation("Dataset");

                    b.Navigation("TrainingRun");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainedModelStatistics", b =>
                {
                    b.HasOne("Entities.TrainingEntities.TrainedModel", "TrainedModel")
                        .WithOne("TrainedModelStatistics")
                        .HasForeignKey("Entities.TrainingEntities.TrainedModelStatistics", "TrainedModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_trained_models_trained_model_statistics_trained_model_statist~");

                    b.Navigation("TrainedModel");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainingRun", b =>
                {
                    b.HasOne("Entities.TrainingEntities.TrainedModel", "BaseModel")
                        .WithMany()
                        .HasForeignKey("BaseModelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_training_runs_asp_net_users_created_by_id");

                    b.HasOne("Entities.DatasetEntities.Dataset", "Dataset")
                        .WithMany()
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_training_runs_datasets_dataset_id");

                    b.Navigation("BaseModel");

                    b.Navigation("CreatedBy");

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainingRunTrainParams", b =>
                {
                    b.HasOne("Entities.TrainingEntities.TrainingRun", "TrainingRun")
                        .WithOne("TrainParams")
                        .HasForeignKey("Entities.TrainingEntities.TrainingRunTrainParams", "TrainingRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_training_runs_training_run_train_params_train_params_id1");

                    b.Navigation("TrainingRun");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("Entities.DatasetEntities.Dataset", b =>
                {
                    b.Navigation("DatasetClasses");

                    b.Navigation("DatasetImages");
                });

            modelBuilder.Entity("Entities.DatasetEntities.DatasetClass", b =>
                {
                    b.Navigation("Datasets");
                });

            modelBuilder.Entity("Entities.DatasetEntities.DatasetImage", b =>
                {
                    b.Navigation("ImageAnnotations");
                });

            modelBuilder.Entity("Entities.DetectionEntities.DetectionRun", b =>
                {
                    b.Navigation("DetectedDumpSites");
                });

            modelBuilder.Entity("Entities.LegalLandfillsManagementEntites.LegalLandfill", b =>
                {
                    b.Navigation("LegalLandfillPointCloudFiles");
                });

            modelBuilder.Entity("Entities.MapConfigurationEntities.MapConfiguration", b =>
                {
                    b.Navigation("MapLayerConfigurations");

                    b.Navigation("MapLayerGroupConfigurations");
                });

            modelBuilder.Entity("Entities.MapConfigurationEntities.MapLayerGroupConfiguration", b =>
                {
                    b.Navigation("MapLayerConfigurations");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainedModel", b =>
                {
                    b.Navigation("TrainedModelStatistics");
                });

            modelBuilder.Entity("Entities.TrainingEntities.TrainingRun", b =>
                {
                    b.Navigation("TrainParams");

                    b.Navigation("TrainedModel");
                });
#pragma warning restore 612, 618
        }
    }
}
