@using DTOs.MainApp.BL.DetectionDTOs
@using MainApp.MVC.Helpers
@using SD.Helpers

@{
    ViewData["Title"] = "Create Detection Run";
}
<div class="content-header bg-gradient-white border-bottom mb-4">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h4 class="text-muted mb-0"> @ViewData["Title"]</h4>
                <small class="text-muted">@DbResHtml.T("Initiate a detection run to analyze and identify potential instances of illegal dumping using system algorithms and data inputs.", "Resources")</small>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="#" class="text-success">@DbResHtml.T("Detection", "Resources")</a></li>
                    <li class="breadcrumb-item active">@ViewData["Title"]</li>
                </ol>
            </div>
        </div>
    </div>
</div>
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8 offset-2">
                <div class="card d-flex">
                    <div class="card-body overlay-wrapper">
                        <div class="">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="form-control-label" for="#inpName">
                                        @DbResHtml.T("Detection Run Name", "Resources")
                                    </label>
                                    <input type="text" name="Name" class="form-control" id="inpName" required />
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label" for="#inpDescription">
                                        @DbResHtml.T("Detection Run Description", "Resources")
                                    </label>
                                    <input type="text" name="Description" class="form-control" id="inpDescription" />
                                </div>
                                <div class="form-group">
                                    <label for="trainedModelSelect" class="form-label">@DbResHtml.T("Trained Model", "Resources")</label>
                                    <select id="trainedModelSelect" class="form-control" name="trainedModelSelect">
                                        <option></option>
                                        @* <option>Trained Model 1</option>
                                        <option>Trained Model 2</option> *@
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="detInputImage" class="form-label">@DbResHtml.T("Detection Input Image", "Resources")</label>
                                    <select id="detInputImage" class="form-control" name="detInputImage">
                                        <option></option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 text-center">
                            @if (User.HasAuthClaim(SD.AuthClaims.ScheduleDetectionRun))
                            {
                                <button type="button" onclick="scheduleDetectionRun()" class="btn bg-gradient-success">
                                    @DbResHtml.T("Schedule Detection", "Resources")
                                </button>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#NavlinkDetection").addClass("active");
            $("#trainedModelSelect").select2({
                width: '100%',
                theme: 'bootstrap4',
                placeholder: "@DbResHtml.T("Select Trained Model", "Resources")",
                allowClear: true
            });
            populateTrainedModelsSelect();

            $("#detInputImage").select2({
                placeholder: "@DbResHtml.T("Select Input Image", "Resources")",
                allowClear: true,
                width: '100%',
                theme: 'bootstrap4',
                templateResult: setFormat
            });
            populateInputImageSelect();
            $(document).on("mouseover", "#btnShowDetails", function (event) {
                event.stopPropagation();
                var buttonImgDetails = $(this).data("image-id");
                if (buttonImgDetails !== null) {
                    setTimeout(function () {
                        showInputImageDetailsModal(buttonImgDetails);
                        setTimeout(function () {
                            $("#detInputImage").select2("close");
                        }, 110);
                    }, 700);
                }
            });
        });

        function showInputImageDetailsModal(currentImgId) {
            $.ajax({
                type: "POST",
                data: {
                    detectionInputImageId: currentImgId
                },
                url: "@Url.Action("GetDetectionInputImageById", "Detection", new { Area = "IntranetPortal" })",
                success: function (data) {
                    if (data != undefined || data != null) {
                        if (data.isSuccess == false && data.errMsg != null) {
                            Swal.fire({
                                text: `${data.errMsg}`,
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                allowOutsideClick: false,
                                icon: "error"
                            });
                        }
                        else {
                            $("#inputImagePropertiesCardBody").empty();
                            $("#inputImagePreview").empty();
                            var inputImagePropertiesHtml = '';
                            var inputImagePreviewHtml = '';
                            //var thumbnailPath = "/" + data.data.thumbnailFilePath.replace(/\\/g, '/');

                            inputImagePropertiesHtml += `
                                                             <strong><i class="fas fa-file-signature mr-1"></i>@DbResHtml.T("Name", "Resources")</strong>
                                                             <p class="text-muted">${data.data.name}</p>
                                                             <hr>
                                                             <strong><i class="fas fa-book mr-1"></i>@DbResHtml.T("Descripiton", "Resources")</strong>
                                                             <p class="text-muted">${data.data.description}</p>
                                                             <hr>
                                                             <strong><i class="fas fa-calendar-alt mr-1"></i>@DbResHtml.T("Created On", "Resources")</strong>
                                                                <p class="text-muted">${new Date(data.data.createdOn).toLocaleDateString('en-GB')}</p>
                                                             <hr>
                                                             <strong><i class="fas fa-user-edit mr-1"></i>@DbResHtml.T("Created By", "Resources")</strong>
                                                             <p class="text-muted">${data.data.createdBy.userName}</p>
                                                            `;
                            inputImagePreviewHtml += `
                                                                 <img src='${data.data.thumbnailFilePath}' class="w-75 rounded" />
                                                            `;
                            $("#inputImagePropertiesCardBody").append(inputImagePropertiesHtml);
                            $("#inputImagePreview").append(inputImagePreviewHtml);
                            $("#inputImgDetailsModal").show();

                        }
                    }
                    else {
                        Swal.fire({
                            text: `@DbResHtml.T("No data received", "Resources")`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                },
                error: function (req, status, error) {
                    Swal.fire({
                        text: '@DbResHtml.T("Error occured", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            });
        }
        function closeInputImageDetailsModalModal() {
            $("#inputImgDetailsModal").hide();
        }
        function setFormat(state) {
            if (!state.id) {
                return state.text;
            }
            var $state = $(
                `<span class="mr-2">${state.text}</span><button type="button" class="btn btn-xs btn-outline-dark float-right" id="btnShowDetails" data-image-id="${state.element.value}">@DbResHtml.T("Hover to view input image details", "Resources")</button>`
            );
            return $state;
        }

        function populateInputImageSelect() {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetAllDetectionInputImages", "Detection", new { Area = "IntranetPortal" })",
                success: function (data) {
                    if (data != undefined || data != null) {
                        if (data.isSuccess == false && data.errMsg != null) {
                            Swal.fire({
                                text: `${data.errMsg}`,
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                allowOutsideClick: false,
                                icon: "error"
                            });
                        }
                        else {
                            var list = data.data;
                            for (var i = 0; i < list.length; i++) {
                                $("#detInputImage").append($('<option></option>').val(list[i].id).html(`${list[i].name} - ${new Date(list[i].createdOn).toLocaleDateString('en-GB')}`));
                            }
                        }
                    }
                    else {
                        Swal.fire({
                            text: `@DbResHtml.T("No data received", "Resources")`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                },
                error: function (req, status, error) {
                    Swal.fire({
                        text: '@DbResHtml.T("Error occured", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            });
        }

        function populateTrainedModelsSelect() {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetPublishedTrainedModels", "Detection", new { Area = "IntranetPortal" })",
                success: function (data) {
                    if (data == undefined || data == null) {
                        Swal.fire({
                            text: `@DbResHtml.T("No data received", "Resources")`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                        return;
                    }

                    if (data.isSuccess !== true) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                        return;
                    }

                    let list = data.data;
                    for (let i = 0; i < list.length; i++) {
                        $("#trainedModelSelect").append($('<option></option>').val(list[i].id).html(`${list[i].name} - ${new Date(list[i].createdOn).toLocaleDateString('en-GB')}`));
                    }
                },
                error: function (req, status, error) {
                    Swal.fire({
                        text: '@DbResHtml.T("Error occured", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            });
        }

        function scheduleDetectionRun() {
            DisableAllChildControlsByContainerClass('content');

            let inputImg = $("#detInputImage").val();
            let description = $("#inpDescription").val();
            let name = $("#inpName").val();


            if ((name === '' || name === undefined) || (description === '' || description === undefined) || (inputImg === '' || inputImg === undefined)) {
                Swal.fire({
                    text: "@DbResHtml.T("All fields are required", "Resources")",
                    icon: 'error'
                });
                return;
            }

            var viewModel = {
                Name: name,
                Description: description,
                SelectedInputImageId: inputImg
            }

            $.ajax({
                type: "POST",
                url: '@Url.Action("ScheduleDetectionRun", "Detection", new { area = "IntranetPortal" })',
                data: {
                    viewModel: viewModel
                },
                success: function (data) {
                    if (data != undefined || data != null) {
                        if (data.isSuccess == false && data.errMsg != null) {
                            Swal.fire({
                                text: `${data.errMsg}`,
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                allowOutsideClick: false,
                                icon: "error"
                            });
                        }
                        else {
                            Swal.fire({
                                text: '@DbResHtml.T("Detection run scheduled successfully", "Resources")',
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                allowOutsideClick: false,
                                icon: "success"
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    removeOverlayByQuerySelector('.card-body');
                                    location.href = '@Url.Action("Index", "Map", new { area = "IntranetPortal" })';
                                }
                            });
                        }
                    }
                    else {
                        Swal.fire({
                            text: `@DbResHtml.T("No data received", "Resources")`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }

                },
                error: function (req, status, error) {
                    Swal.fire({
                        text: `@DbResHtml.T("Error occured", "Resources")`,
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            });
        }
    </script>
}

@section BodyArea {
    <div class="modal" id="inputImgDetailsModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header bg-gradient-info">
                    <h4 class="modal-title">@DbResHtml.T("Input Image Details", "Resources") </h4>
                </div>
                <div class="modal-body row">
                    <div class="col-md-6">
                        <div class="card card-success bg-light">
                            <div class="card-body" id="inputImagePropertiesCardBody">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card card-success bg-light">
                            <div class="card-body text-center" id="inputImagePreview">
                            </div>
                        </div>
                    </div>


                </div>
                <div class="modal-footer">
                    <button onclick="closeInputImageDetailsModalModal()" type="button" class="mb-1 btn btn-outline-info" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">@DbResHtml.T("Close", "Resources")</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}
