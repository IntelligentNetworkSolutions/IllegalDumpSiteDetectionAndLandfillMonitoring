@using DTOs.MainApp.BL.TrainingDTOs
@using MainApp.MVC.Helpers
@using SD.Helpers

@{
    ViewData["Title"] = "Create Training Run";
}
<div class="content-header bg-gradient-white border-bottom mb-4">
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm-6">
                <h4 class="text-muted mb-0"> @ViewData["Title"]</h4>
                <small class="text-muted">@DbResHtml.T("Initiate a training run selected training model and dataset.", "Resources")</small>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right mb-2">
                    <li class="breadcrumb-item">
                        <a asp-action="Index" asp-controller="Map" asp-area="IntranetPortal" class="text-success">@DbResHtml.T("Home", "Resources")</a>
                    </li>
                    <li class="breadcrumb-item">
                        <a asp-action="Index" asp-controller="TrainingRuns" asp-area="IntranetPortal" class="text-success">@DbResHtml.T("Training runs list", "Resources")</a>
                    </li>
                    <li class="breadcrumb-item active">
                        @DbResHtml.T(@ViewData["Title"]?.ToString() ?? "Create Training Run", "Resources")
                    </li>
                </ol>
                <div>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-8 offset-2">
                <div class="card d-flex">
                    <div class="card-body overlay-wrapper">
                        <div class="">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="form-control-label" for="#inpName">
                                        @DbResHtml.T("Training Run Name", "Resources")
                                    </label>
                                    <input type="text" name="Name" class="form-control" id="inpName" required />
                                </div>
                                <div class="form-group">
                                    <label for="trainedModelSelect" class="form-label">@DbResHtml.T("Model To Train On", "Resources")</label>
                                    <select id="trainedModelSelect" class="form-control" name="trainedModelSelect">
                                        <optgroup label="Base models"></optgroup>
                                        <optgroup label="Trained models"></optgroup>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="datasetSelect" class="form-label">@DbResHtml.T("Dataset", "Resources")</label>
                                    <select id="datasetSelect" class="form-control" name="datasetSelect">
                                        <option></option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="numOfEpochs" class="form-label">@DbResHtml.T("Number of epochs", "Resources")</label>
                                    <select id="numOfEpochs" class="form-control" name="numOfEpochs">
                                        <option></option>
                                        @for (int i = 1; i <= 50; i++)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="batchSize" class="form-label">@DbResHtml.T("Batch size", "Resources")</label>
                                    <select id="batchSize" class="form-control" name="batchSize">
                                        <option></option>
                                        @for (int i = 1; i <= 4; i++)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="frozenStages" class="form-label">@DbResHtml.T("Number of frozen stages", "Resources")</label>
                                    <select id="frozenStages" class="form-control" name="frozenStages">
                                        <option></option>
                                        @for (int i = 1; i <= 4; i++)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 text-center d-flex justify-content-between mt-4">
                            <a asp-area="IntranetPortal" asp-controller="TrainingRuns" asp-action="Index" class="btn btn-secondary ml-2">
                                @DbResHtml.T("Back", "Resources")
                            </a>
                            @await Component.InvokeAsync("Documentation", new { path = "/guides/training-process/training-guide.html" })

                            @if (User.HasAuthClaim(SD.AuthClaims.ScheduleTrainingRun))
                            {

                                <button type="button" onclick="scheduleTrainingRun()" class="btn bg-gradient-success">
                                    @DbResHtml.T("Schedule Training", "Resources")
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {

            $("#trainedModelSelect").select2({
                width: '100%',
                theme: 'bootstrap4',
                placeholder: "@DbResHtml.T("Select Trained Model", "Resources")",
                allowClear: true,
                templateResult: setFormatTrainedModel
            });
            $("#numOfEpochs").select2({
                width: '100%',
                theme: 'bootstrap4',
                placeholder: "@DbResHtml.T("Select Number Of Epochs", "Resources")",
                allowClear: true
            });
            $("#frozenStages").select2({
                width: '100%',
                theme: 'bootstrap4',
                placeholder: "@DbResHtml.T("Select Number Of Frozen Stages", "Resources")",
                allowClear: true
            });
            $("#batchSize").select2({
                width: '100%',
                theme: 'bootstrap4',
                placeholder: "@DbResHtml.T("Select Batch Size", "Resources")",
                allowClear: true
            });
            $("#datasetSelect").select2({
                placeholder: "@DbResHtml.T("Select Dataset", "Resources")",
                allowClear: true,
                width: '100%',
                theme: 'bootstrap4',
                templateResult: setFormat
            });
            populateDatasetSelect();
            populateTrainedModelSelect();

            $(document).on("mouseover", "#btnShowDatasetDetails", function (event) {
                event.stopPropagation();
                var buttonDatasetDetails = $(this).data("dataset-id");
                if (buttonDatasetDetails !== null) {
                    setTimeout(function () {
                        showDatasetDetailsModal(buttonDatasetDetails);
                        setTimeout(function () {
                            $("#datasetSelect").select2("close");
                        }, 110);
                    }, 700);
                }
            });
            $(document).on("mouseover", "#btnShowTrainedModelDetails", function (event) {
                event.stopPropagation();
                var buttonTrainedModelDetails = $(this).data("trainedmodel-id");
                if (buttonTrainedModelDetails !== null) {
                    setTimeout(function () {
                        showTrainedModelDetailsModal(buttonTrainedModelDetails);
                        setTimeout(function () {
                            $("#trainedModelSelect").select2("close");
                        }, 110);
                    }, 700);
                }
            });
        });

        function setFormat(state) {
            if (!state.id) {
                return state.text;
            }
            var $state = $(
                `<span class="mr-2">${state.text}</span><button type="button" class="btn btn-xs btn-outline-dark float-right" id="btnShowDatasetDetails" data-dataset-id="${state.element.value}">@DbResHtml.T("Hover to view dataset details", "Resources")</button>`
            );
            return $state;
        }

        function populateDatasetSelect() {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetAllPublishedDatasets", "Datasets", new { Area = "IntranetPortal" })",
                success: function (data) {
                    if (data != undefined || data != null) {
                        if (data.isSuccess == false && data.errMsg != null) {
                            Swal.fire({
                                text: `${data.errMsg}`,
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                allowOutsideClick: false,
                                icon: "error"
                            });
                        }
                        else {
                            var list = data.data;
                            for (var i = 0; i < list.length; i++) {
                                $("#datasetSelect").append($('<option></option>').val(list[i].id).html(list[i].name));
                            }
                        }
                    }
                    else {
                        Swal.fire({
                            text: `@DbResHtml.T("No data received", "Resources")`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                },
                error: function (req, status, error) {
                    Swal.fire({
                        text: '@DbResHtml.T("Error occured", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            });
        }

        function showDatasetDetailsModal(currentDatasetId) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("GetParentAndChildrenDatasets", "Datasets", new { Area = "IntranetPortal" })",
                data: {
                    currentDatasetId: currentDatasetId
                },
                success: function (data) {
                    if (data.responseError != null || data.responseError != undefined) {
                        Swal.fire({
                            text: `${data.responseError.value}`,
                            icon: "error"
                        });
                    } else {
                        $("#viewParentDatasetModalTableTBody").empty();
                        $("#viewChildrenDatasetsModalTableTBody").empty();

                        $("#currentDatasetNameHeader").empty();
                        $("#currentDatasetPropertiesCardBody").empty();

                        var currentDatasetHeaderHtml = "";
                        var currentDatasetPropertiesHtml = "";
                        if (data.currentDataset && data.currentDataset != null) {
                            var createdOn = new Date(data.currentDataset.createdOn);

                            var day = createdOn.getDate();
                            var month = createdOn.getMonth() + 1;
                            var year = createdOn.getFullYear();

                            var formattedDate = ('0' + day).slice(-2) + '.' + ('0' + month).slice(-2) + '.' + year;

                            currentDatasetHeaderHtml += `<h3 class="card-title">@DbResHtml.T("Selected Dataset: ", "Resources")</h3>`;

                            currentDatasetPropertiesHtml += `
                                                     <strong><i class="fas fa-file-signature mr-1"></i>@DbResHtml.T("Name", "Resources")</strong>
                                                     <p class="text-muted">${data.currentDataset.name}</p>
                                                     <hr>
                                                     <strong><i class="fas fa-book mr-1"></i>@DbResHtml.T("Descripiton", "Resources")</strong>
                                                     <p class="text-muted">${data.currentDataset.description}</p>
                                                     <hr>
                                                     <strong><i class="fas fa-calendar-alt mr-1"></i>@DbResHtml.T("Created On", "Resources")</strong>
                                                             <p class="text-muted">${formattedDate}</p>
                                                     <hr>
                                                     <strong><i class="fas fa-user-edit mr-1"></i>@DbResHtml.T("Created By", "Resources")</strong>
                                                     <p class="text-muted">${data.currentDataset.createdBy.userName}</p>
                                                     <hr>
                                                     <strong><i class="fas fa-file-upload mr-1"></i>@DbResHtml.T("Is Published", "Resources")</strong>
                                                     <p class="text-muted">${data.currentDataset.isPublished}</p>
                                                    `;
                        }

                        var dataHtmlParent = "";
                        if (data.parent && data.parent.name != null) {
                            dataHtmlParent += `<tr><td>${data.parent.name}</td><td>${data.parent.description}</td></tr>`;
                        } else {
                            dataHtmlParent += `<tr><td class="text-center" colspan="2">@DbResHtml.T("No parent dataset", "Resources")</td></tr>`;
                        }

                        var dataHtmlChildren = "";
                        if (data.childrenList && data.childrenList.length > 0) {
                            data.childrenList.forEach(function (child) {
                                dataHtmlChildren += `<tr><td>${child.name}</td><td>${child.description}</td></tr>`;
                            });
                        } else {
                            dataHtmlChildren += `<tr><td class="text-center" colspan="2">@DbResHtml.T("No children datasets", "Resources")</td></tr>`;
                        }

                        $("#viewParentDatasetModalTableTBody").append(dataHtmlParent);
                        $("#viewChildrenDatasetsModalTableTBody").append(dataHtmlChildren);
                        $("#currentDatasetNameHeader").append(currentDatasetHeaderHtml);
                        $("#currentDatasetPropertiesCardBody").append(currentDatasetPropertiesHtml);
                        $("#viewParentChildrenDatasetModal").show();
                    }

                },
                error: function (req, status, error) {
                    Swal.fire({
                        text: '@DbResHtml.T("Error occured", "Resources")',
                        icon: "error"
                    });
                }
            });
        }

        function closeDatasetDetailsModal() {
            $("#viewParentChildrenDatasetModal").hide();
        }

        function populateTrainedModelSelect() {
            $.ajax({
                type: "GET",
                url: "@Url.Action("GetAllTrainedModels", "TrainedModels", new { Area = "IntranetPortal" })",
                success: function (data) {
                    if (data != undefined || data != null) {
                        if (data.isSuccess == false && data.errMsg != null) {
                            Swal.fire({
                                text: `${data.errMsg}`,
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                allowOutsideClick: false,
                                icon: "error"
                            });
                        }
                        else {
                            var list = data.data;
                            var baseModels = $("#trainedModelSelect optgroup[label='Base models']");
                            var trainedModels = $("#trainedModelSelect optgroup[label='Trained models']");

                            baseModels.empty();
                            trainedModels.empty();
                            $('#trainedModelSelect').val(null);
                            for (var i = 0; i < list.length; i++) {
                                var option = $('<option></option>').val(list[i].id).html(`${list[i].name} - ${new Date(list[i].createdOn).toLocaleDateString()}`);

                                if (list[i].baseModelId == null) {
                                    baseModels.append(option);
                                }
                                else {
                                    option.attr("data-trained-model-other", "true");
                                    trainedModels.append(option);
                                }
                            }
                            $("#trainedModelSelect").select2({
                                width: '100%',
                                theme: 'bootstrap4',
                                placeholder: "@DbResHtml.T("Select Trained Model", "Resources")",
                                allowClear: true,
                                templateResult: function (state) {
                                    if ($(state.element).data("trained-model-other")) {
                                        return setFormatTrainedModel(state);
                                    }
                                    return state.text;
                                }
                            });
                            $('#trainedModelSelect').val(null).trigger('change');
                        }

                    }
                    else {
                        Swal.fire({
                            text: `@DbResHtml.T("No data received", "Resources")`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                },
                error: function (req, status, error) {
                    Swal.fire({
                        text: '@DbResHtml.T("Error occured", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            });
        }

        function showTrainedModelDetailsModal(currentTrainedModelId) {
            $.ajax({
                type: "POST",
                data: {
                    trainedModelId: currentTrainedModelId
                },
                url: "@Url.Action("GetTrainedModelStatistics", "TrainedModels", new { Area = "IntranetPortal" })",
                success: function (data) {
                    if (data != undefined || data != null) {
                        if (data.isSuccess == false && data.errMsg != null) {
                            Swal.fire({
                                text: `${data.errMsg}`,
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                allowOutsideClick: false,
                                icon: "error"
                            });
                        }
                        else {
                            $("#trainedModelStatisticsModalBody").html("");

                            $("#trainedModelStatisticsModalBody").append(
                                '<canvas id="epochTrainedModelMetricsScheduleChart" width="800" height="400"></canvas>'
                            );
                            const metrics = parseMetrics(data.data);
                            createChart(metrics);
                            $('#trainedModelStatisticsModal').modal('show');

                        }
                    }
                    else {
                        Swal.fire({
                            text: `@DbResHtml.T("No data received", "Resources")`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                },
                error: function (req, status, error) {
                    Swal.fire({
                        text: '@DbResHtml.T("Error occured", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            });
        }
        function setFormatTrainedModel(state) {
            if (!state.id) {
                return state.text;
            }
            var $state = $(
                `<span class="mr-2">${state.text}</span><button type="button" class="btn btn-xs btn-outline-dark float-right" id="btnShowTrainedModelDetails" data-trainedmodel-id="${state.element.value}">@DbResHtml.T("Hover to view trained model statistics", "Resources")</button>`
            );
            return $state;
        }
        function parseMetrics(data) {
            const epochs = [];
            const mAP = [];
            const mAP50 = [];
            const mAP75 = [];
            let isFirstAccess = true;

            const bestEpochModel = {
                maP: {
                    bbox_maP: null,
                    best_maP_epoch: null
                },
                maP_50: {
                    bbox_maP_50: null,
                    best_maP_50_epoch: null
                },
                maP_75: {
                    bbox_maP_75: null,
                    best_maP_75_epoch: null
                }
            };

            const bestLastStep = data.bestEpochMetrics.steps.find(step => step.metrics["coco/bbox_mAP"] !== undefined).metrics;
            for (const epochKey in data.epochMetrics) {
                if (data.epochMetrics.hasOwnProperty(epochKey)) {
                    const epochData = data.epochMetrics[epochKey];
                    const lastStep = epochData.steps.find(step => step.metrics["coco/bbox_mAP"] !== undefined);

                    if (lastStep && lastStep.metrics) {
                        epochs.push(`Epoch ${epochKey}`);
                        mAP.push(lastStep.metrics["coco/bbox_mAP"] || 0);
                        mAP50.push(lastStep.metrics["coco/bbox_mAP_50"] || 0);
                        mAP75.push(lastStep.metrics["coco/bbox_mAP_75"] || 0);

                        if (isFirstAccess) {
                            bestEpochModel.maP.best_maP_epoch = epochKey;
                            bestEpochModel.maP.bbox_maP = lastStep.metrics["coco/bbox_mAP"];
                            bestEpochModel.maP_50.best_maP_50_epoch = epochKey;
                            bestEpochModel.maP_50.bbox_maP_50 = lastStep.metrics["coco/bbox_mAP_50"];
                            bestEpochModel.maP_75.best_maP_75_epoch = epochKey;
                            bestEpochModel.maP_75.bbox_maP_75 = lastStep.metrics["coco/bbox_mAP_75"];
                            isFirstAccess = false;
                        }
                        else {
                            if (lastStep.metrics["coco/bbox_mAP"] >= bestEpochModel.maP.bbox_maP) {
                                bestEpochModel.maP.best_maP_epoch = epochKey;
                                bestEpochModel.maP.bbox_maP = lastStep.metrics["coco/bbox_mAP"];
                            }

                            if (lastStep.metrics["coco/bbox_mAP_50"] >= bestEpochModel.maP_50.bbox_maP_50) {
                                bestEpochModel.maP_50.best_maP_50_epoch = epochKey;
                                bestEpochModel.maP_50.bbox_maP_50 = lastStep.metrics["coco/bbox_mAP_50"];
                            }

                            if (lastStep.metrics["coco/bbox_mAP_75"] >= bestEpochModel.maP_75.bbox_maP_75) {
                                bestEpochModel.maP_75.best_maP_75_epoch = epochKey;
                                bestEpochModel.maP_75.bbox_maP_75 = lastStep.metrics["coco/bbox_mAP_75"];
                            }
                        }

                    }
                }
            }

            return { epochs, mAP, mAP50, mAP75, bestEpochModel };
        }
        function createChart(metrics) {
            const ctx = document.getElementById('epochTrainedModelMetricsScheduleChart').getContext('2d');
            const labels = metrics.epochs
            const data = {
                labels: labels,
                datasets: [
                    {
                        label: `bbox_mAP (Best: ${metrics.bestEpochModel.maP.bbox_maP} in epoch ${metrics.bestEpochModel.maP.best_maP_epoch})`,
                        data: metrics.mAP,
                        borderColor: 'rgba(75, 192, 192, 1)',
                        fill: false,
                        pointStyle: 'circle',
                        pointRadius: 4,
                        pointHoverRadius: 7,
                        backgroundColor: 'rgba(75, 192, 192, 0.6)'
                    },
                    {
                        label: `bbox_mAP_50 (Best: ${metrics.bestEpochModel.maP_50.bbox_maP_50} in epoch ${metrics.bestEpochModel.maP_50.best_maP_50_epoch})`,
                        data: metrics.mAP50,
                        borderColor: 'rgba(255, 159, 64, 1)',
                        fill: false,
                        pointStyle: 'circle',
                        pointRadius: 4,
                        pointHoverRadius: 7,
                        backgroundColor: 'rgba(255, 159, 64, 0.6)'
                    },
                    {
                        label: `bbox_mAP_75 (Best: ${metrics.bestEpochModel.maP_75.bbox_maP_75} in epoch ${metrics.bestEpochModel.maP_75.best_maP_75_epoch})`,
                        data: metrics.mAP75,
                        borderColor: 'rgba(153, 102, 255, 1)',
                        fill: false,
                        pointStyle: 'circle',
                        pointRadius: 4,
                        pointHoverRadius: 7,
                        backgroundColor: 'rgba(153, 102, 255, 0.6)'
                    }
                ]
            };

            new Chart(ctx, {
                type: 'line',
                data: data,
                options: {
                    responsive: true
                }
            });
        }

        function scheduleTrainingRun() {
            let datasetId = $("#datasetSelect").val();
            let trainedModelId = $("#trainedModelSelect").val();
            let name = $("#inpName").val();
            let batchSize = $("#batchSize").val();
            let numOfEpochs = $("#numOfEpochs").val();
            let frozenStages = $("#frozenStages").val();


            if ((name === '' || name === undefined) ||
                (trainedModelId === '' || trainedModelId === undefined) ||
                (datasetId === '' || datasetId === undefined) ||
                (batchSize === '' || batchSize === undefined) ||
                (numOfEpochs === '' || numOfEpochs === undefined) ||
                (frozenStages === '' || frozenStages === undefined)
            ) {
                Swal.fire({
                    text: '@DbResHtml.T("All fields are required", "Resources")',
                    icon: 'error'
                });
                return;
            }

            var viewModel = {
                Name: name,
                TrainedModelId: trainedModelId,
                DatasetId: datasetId,
                BatchSize: batchSize,
                NumEpochs: numOfEpochs,
                NumFrozenStages: frozenStages
            }

            $.ajax({
                type: "POST",
                url: '@Url.Action("ScheduleTrainingRun", "TrainingRuns", new { area = "IntranetPortal" })',
                data: {
                    viewModel: viewModel
                },
                success: function (data) {
                    if (data != undefined || data != null) {
                        if (data.isSuccess == false && data.errMsg != null) {
                            Swal.fire({
                                text: `${data.errMsg}`,
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                allowOutsideClick: false,
                                icon: "error"
                            });
                        }
                        else {
                            Swal.fire({
                                text: '@DbResHtml.T("Training run scheduled successfully", "Resources")',
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                allowOutsideClick: false,
                                icon: "success"
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    location.href = '@Url.Action("Index", "Map", new { area = "IntranetPortal" })';
                                }
                            });
                        }
                    }
                    else {
                        Swal.fire({
                            text: `@DbResHtml.T("No data received", "Resources")`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }

                },
                error: function (req, status, error) {
                    Swal.fire({
                        text: `@DbResHtml.T("Error occured", "Resources")`,
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            });
        }
    </script>
}
@section BodyArea {
    <div class="modal" id="trainedModelStatisticsModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header bg-gradient-lightblue">
                    <h5 class="modal-title">@DbResHtml.T("Trained model statistics", "Resources")</h5>
                    <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div id="trainedModelStatisticsModalBody" class="modal-body">
                </div>
            </div>
        </div>
    </div>
    <div class="modal" id="viewParentChildrenDatasetModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header bg-gradient-dark">
                    <h4 class="modal-title">@DbResHtml.T("Parent/Children datasets", "Resources") </h4>
                </div>
                <div class="modal-body row">
                    <div class="col-md-6">
                        <div class="card card-success bg-light">
                            <div class="card-header" id="currentDatasetNameHeader">
                            </div>
                            <div class="card-body" id="currentDatasetPropertiesCardBody">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 table-responsive">
                        <table class="table table-bordered table-striped mb-4 w-100" id="viewParentDatasetModalTable">
                            <thead class="bg-gradient-gray">
                                <tr>
                                    <th>
                                        @DbResHtml.T("Parent dataset", "Resources")
                                    </th>
                                    <th>
                                        @DbResHtml.T("Description", "Resources")
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="viewParentDatasetModalTableTBody">
                            </tbody>
                        </table>
                        <table class="table table-bordered table-striped mb-4 w-100" id="viewChildrenDatasetsModalTable">
                            <thead class="bg-gradient-gray-dark">
                                <tr>
                                    <th>
                                        @DbResHtml.T("Child dataset", "Resources")
                                    </th>
                                    <th>
                                        @DbResHtml.T("Description", "Resources")
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="viewChildrenDatasetsModalTableTBody">
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button onclick="closeDatasetDetailsModal()" type="button" class="mb-1 btn bg-gradient-dark" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">@DbResHtml.T("Close", "Resources")</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
}