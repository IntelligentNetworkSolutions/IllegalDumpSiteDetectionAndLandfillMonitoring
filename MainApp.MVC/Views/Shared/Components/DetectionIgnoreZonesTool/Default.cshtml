@model Guid?
@using DTOs.MainApp.BL.DetectionDTOs
@using MainApp.MVC.Helpers;
@using Westwind.Globalization
@using Westwind.Globalization.AspNetCore.Extensions
@using Westwind.Globalization.AspNetCore
@using Newtonsoft.Json


<!-- Modal HTML -->
<div class="modal fade" id="polygonModal" tabindex="-1" role="dialog" aria-labelledby="polygonModalLabel" aria-hidden="true" style="z-index:2000;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="polygonModalLabel">@DbResHtml.T("Proceed adding new ignore zone", "Resources")</h5>
            </div>
            <div class="modal-body">
                <form id="polygonForm">
                    <div class="form-group">
                        <label for="zoneName">@DbResHtml.T("Name", "Resources")</label>
                        <input type="text" class="form-control" id="zoneName" required>
                    </div>
                    <div class="form-group">
                        <label for="zoneDescription">@DbResHtml.T("Description", "Resources")</label>
                        <input type="text" class="form-control" id="zoneDescription" required>
                    </div>
                    <div class="form-group clearfix">
                        <div class="icheck-success mt-3 text-bold">
                            <input type="checkbox" id="isZoneEnabled" />
                            <label for="isZoneEnabled">
                                @DbResHtml.T("Is Enabled", "Resources")
                            </label>
                        </div>
                    </div>
                    <input type="hidden" id="polygonCoordinates">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-outline-secondary" data-dismiss="modal" onclick="closeAddPolygonModal()">@DbResHtml.T("Cancel", "Resources")</button>
                <button type="button" class="btn btn-sm bg-gradient-success" onclick="savePolygon()">@DbResHtml.T("Save", "Resources")</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="editZoneModal" tabindex="-1" role="dialog" aria-labelledby="editZoneModalLabel" aria-hidden="true" style="z-index:2000;">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editZoneModalLabel">@DbResHtml.T("Proceed editing the selected ignore zone", "Resources")</h5>
            </div>
            <div id="editZoneModalBody" class="modal-body">
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-sm btn-outline-secondary" data-dismiss="modal" onclick="closeEditZoneModal()">@DbResHtml.T("Cancel", "Resources")</button>
                <button type="button" class="btn btn-sm bg-gradient-warning text-white" onclick="saveEditZone()">@DbResHtml.T("Save", "Resources")</button>
            </div>
        </div>
    </div>
</div>

<!-- edit polygon alert-->
<div id="editNotify" class="d-none position-fixed bg-gradient-dark text-white p-3 rounded shadow-lg" style="top: 60px; left: 50%; transform: translateX(-50%); z-index: 1000; opacity: 0.95;">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <span class="lead">@DbResHtml.T("Editing Ignore Zone", "Resources")</span>
        <button id="finishEditingButton" class="btn btn-xs btn-warning ml-4">@DbResHtml.T("Proceed", "Resources")</button>
        <button id="cancelEditingButton" class="btn btn-xs btn-outline-light mx-2">@DbResHtml.T("Cancel", "Resources")</button>       
    </div>
    <div>
        <p class="mb-0 text-xs">@DbResHtml.T("CLICK AND HOLD on the polygon lines to start editing.", "Resources")</p>
        <p class="mb-0 text-xs">@DbResHtml.T("Click PROCEED to continue.", "Resources")</p>
        <p class="mb-0 text-xs">@DbResHtml.T("Click CANCEL or ESC to abort editing.", "Resources")</p>
    </div>
</div>

<div id="addNotify" class="d-none position-fixed bg-gradient-dark text-white p-3 rounded shadow-lg" style="top: 60px; left: 50%; transform: translateX(-50%); z-index: 1000; opacity: 0.95;">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <span class="lead">@DbResHtml.T("Adding Ignore Zone", "Resources")</span>
        <button id="cancelAddingZoneBtn" class="btn btn-sm btn-outline-light">@DbResHtml.T("Cancel", "Resources")</button>
    </div>
    <div>
        <p class="mb-0 text-xs">@DbResHtml.T("CLICK on the map to start drawing.", "Resources")</p>
        <p class="mb-0 text-xs">@DbResHtml.T("DOUBLE CLICK on the last point to finish drawing.", "Resources")</p>
        <p class="mb-0 text-xs">@DbResHtml.T("Click CANCEL or ESC to abort drawing.", "Resources")</p>
    </div>
</div>
<script type="text/javascript">
    $(function () {
        // Activate the ignore zones tool
        function activateIgnoreZonesTool() {
            mapVars.deactivateTools();
            $("#map-sidebar-ignorezones-pane").addClass("active");
            this.isActive = true;
        }

        // Deactivate the ignore zones tool and clean up interactions
        function deactivateIgnoreZonesTool() {
            cleanupDrawInteraction();
            if (currentFocusedPolygon) {
                let zoneName = currentFocusedPolygon.get('zoneName');   
                let zoneIsEnabled = currentFocusedPolygon.get('isEnabled');
                if (originalGeometry) {
                    currentFocusedPolygon.setGeometry(originalGeometry.clone());
                }               
                currentFocusedPolygon.setStyle(defaultStyle(zoneName, zoneIsEnabled));
                currentFocusedPolygon = null;
                originalGeometry = null;
            }

            cleanUpEditZoneMode();
            $('.modal').modal('hide');
            Swal.close();

            this.isActive = false;
            $("#map-sidebar-ignorezones-pane").removeClass("active");

            if (!$("#editNotify").hasClass("d-none")) {
                $("#editNotify").addClass("d-none");
            }

            if (!$("#addNotify").hasClass("d-none")) {
                $("#addNotify").addClass("d-none");
            }

            resetAllFeaturesToDefaultStyle();
            return true;
        }

        // Initialize the IgnoreZones tool
        var ignoreZones = new MapToolBaseClass("IgnoreZones");
        ignoreZones.activateTool = activateIgnoreZonesTool;
        ignoreZones.deactivateTool = deactivateIgnoreZonesTool;
        ignoreZones.defaultFitPadding = [30, 580, 30, 30];

        mapVars.mapTools.push(ignoreZones);

        // Sidebar tab and pane HTML structure
        var tabHtml = `
            <li>
                <a href="#map-sidebar-ignorezones-pane" id="map-sidebar-ignorezones-btn" role="tab" data-toggle="tooltip" data-trigger="hover" data-placement="left" title="@DbResHtml.T("Ignore Zones", "Resources")">
                    <i class="fg-layer-alt-x-o fg-lg"></i>
                </a>
            </li>`;

        var paneHtml = `
            <div class="turbosidebar-pane" id="map-sidebar-ignorezones-pane">
                 <h1 class="turbosidebar-header text-center bg-gradient-dark">
                     @DbResHtml.T("Detection Ignore Zones", "Resources")
                     <span class="turbosidebar-close"><i class="fa fa-times"></i></span>
                </h1>
                <button onclick="addNewZone()" class="btn btn-sm bg-gradient-success my-3" title="@DbResHtml.T("Add", "Resources")">
                    <i class="fas fa-plus"></i>&nbsp;
                     @DbResHtml.T("Add Ignore Zone", "Resources")
                </button>
                <div id="map-sidebar-ignorezonestable-tab-container"></div>
            </div>`;

        // Append the tab and pane to the sidebar
        $("#map-sidebar-upper-tabs-list").append(tabHtml);
        $("#map-sidebar-content").append(paneHtml);

        // Toggle the ignore zones tool when the sidebar button is clicked
        $('#map-sidebar-ignorezones-btn').on("click", function () {
            if ($(this).parent().hasClass("active")) {
                ignoreZones.deactivateTool();
            } else {
                ignoreZones.activateTool();
            }
        });

        // Deactivate the tool when the close button is clicked
        $(document).on("click", '#map-sidebar-ignorezones-pane .turbosidebar-close', function () {
            ignoreZones.deactivateTool();
        });

        //Deaticvate the toll when other tool is clicked
        $("#map-sidebar-upper-tabs-list").on("click", "li", function (e) {
            if (!$(this).hasClass("active") && ignoreZones.isActive) {
                ignoreZones.deactivateTool();
            }
        });

        // Clean up the drawing polygon on Escape key press
        $(document).on('keydown', function (event) {
            if (event.keyCode === 27 || event.key === 'Escape') {
                cleanupDrawInteraction();
                if (!$("#addNotify").hasClass("d-none")) {
                    $("#addNotify").addClass("d-none");
                }
                if (currentFocusedPolygon) {
                    let zoneName = currentFocusedPolygon.get('zoneName');
                    let zoneIsEnabled = currentFocusedPolygon.get('isEnabled');
                    if (originalGeometry) {
                        currentFocusedPolygon.setGeometry(originalGeometry.clone());
                    }
                    currentFocusedPolygon.setStyle(defaultStyle(zoneName, zoneIsEnabled));
                    currentFocusedPolygon = null;
                    originalGeometry = null;
                    cleanUpEditZoneMode();
                    if (!$("#editNotify").hasClass("d-none")) {
                        $("#editNotify").addClass("d-none");
                    }
                }                           
              
            }
        });

        // Generate ignore zones table and fetch existing zones
        generateDetectionIgnoreZonesTable();
        getAllIgnoreZones();
    });

    //DRAW ZONE's TABLE
    function generateDetectionIgnoreZonesTable() {
        var originalZIndex = $('#map-sidebar').css('z-index');
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAlllIgnoreZones", "DetectionIgnoreZones", new { Area = "IntranetPortal" })",
            success: function (data) {
                var detectionIgnoreZonesTable = "";
                if (data != undefined || data != null) {
                    if (data.isSuccess == false && data.errMsg != null) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            didOpen: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                    else {
                        if (data.data.length == 0) {
                            showEmptyTable(detectionIgnoreZonesTable)
                        }
                        else {
                            showTableOfAllIgnoreZones(detectionIgnoreZonesTable, data.data);
                        }
                    }
                }
                else {
                    Swal.fire({
                        text: `@DbResHtml.T("No data received", "Resources")`,
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        didOpen: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        willClose: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            },
            error: function (req, status, error) {
                Swal.fire({
                    text: '@DbResHtml.T("Error occured", "Resources")',
                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                    didOpen: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    willClose: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    allowOutsideClick: false,
                    icon: "error"
                });
            }
        });
    }

    function showEmptyTable(detectionIgnoreZonesTable) {
        detectionIgnoreZonesTable +=
            `   <table class='table table-striped table-bordered table-hover mt-4'>
                                            <thead>
                                                <tr>
                                                    <th>@DbResHtml.T("Name", "Resources")</th>
                                                    <th>@DbResHtml.T("Description", "Resources")</th>
                                                    <th>@DbResHtml.T("Is Enabled", "Resources")</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                   <td colspan="4" class="text-center">@DbResHtml.T("No data available.", "Resources")</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    `
        $("#map-sidebar-ignorezonestable-tab-container").html(detectionIgnoreZonesTable);
    }

    function showTableOfAllIgnoreZones(detectionIgnoreZonesTable, ignoreZonesList) {
        detectionIgnoreZonesTable +=
            `<table class='table table-striped table-bordered table-hover mt-4' id='detectionIgnoreZonesTable'>
                                        <thead>
                                            <tr>
                                                <th>@DbResHtml.T("Name", "Resources")</th>
                                                <th>@DbResHtml.T("Description", "Resources")</th>
                                                <th>@DbResHtml.T("Is Enabled", "Resources")</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                 `;

        detectionIgnoreZonesTable = drawTableRowsForEachIgnoreZone(ignoreZonesList, detectionIgnoreZonesTable);
        detectionIgnoreZonesTable += `</tbody></table>`;
        $("#map-sidebar-ignorezonestable-tab-container").html(detectionIgnoreZonesTable);
    }

    function drawTableRowsForEachIgnoreZone(ignoreZonesList, detectionIgnoreZonesTable) {
        ignoreZonesList.forEach(function (item) {
            detectionIgnoreZonesTable +=
                `<tr>
                                            <td class="text-nowrap overflow-auto" style="max-width: 130px;"  title="${item.name}">${item.name}</td>
                                                <td class="text-nowrap overflow-auto" style="max-width: 130px;" title="${item.description}">${item.description}</td>
                                            <td>${item.isEnabled}</td>
                                            <td>
                                                <button onclick='focusOnIgnoreZone("${item.id}")' class="btn btn-xs bg-gradient-dark mr-1" title="@DbResHtml.T("Focus on this zone", "Resources")">
                                                    <i class="fas fa-search-location"></i>
                                                </button>
                                                <button onclick='editIgnoreZone("${item.id}")' class="btn btn-xs bg-gradient-warning text-white mx-1" title="@DbResHtml.T("Edit", "Resources")">
                                                     <i class="fas fa-edit"></i>
                                                </button>
                                                    <button onclick='deleteIgnoreZone("${item.id}")' class="btn btn-xs bg-gradient-danger ml-1" title="@DbResHtml.T("Delete", "Resources")">
                                                     <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                         </tr>
                                        `

        });
        return detectionIgnoreZonesTable;
    }

    //BTNS CLICKS FUNCTIONS
    //1.edit ignore zone btn click functions
    let modifyInteraction;
    let originalGeometry;

    function editIgnoreZone(zoneId) {
        var originalZIndex = $('#map-sidebar').css('z-index');
        Swal.fire({
            text: '@DbResHtml.T("Do you want to edit the selected ignore zone?", "Resources")',
            showDenyButton: true,
            showCancelButton: true,
            allowOutsideClick: false,
            confirmButtonText: '@DbResHtml.T("Yes", "Resources")',
            denyButtonText: '@DbResHtml.T("No, just other properties", "Resources")',
            cancelButtonText: '@DbResHtml.T("Cancel", "Resources")',
            customClass: {
                confirmButton: 'bg-gradient-success',
                cancelButton: 'bg-gradient-secondary',
                denyButton: 'bg-gradient-dark'
            },
            didOpen: () => {
                manageMapSidebarZIndex(originalZIndex, '1040');
            },
            willClose: () => {
                manageMapSidebarZIndex(originalZIndex, '1040');
            },
            icon: "warning"
        }).then((result) => {
            if (result.isConfirmed) {
                var zoneToEdit = getZoneById(zoneId);
                if (!zoneToEdit) {
                    Swal.fire({
                        text: '@DbResHtml.T("Selected zone not found", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                    return;
                }

                focusOnSelectedZone(zoneToEdit);
                enableEditZoneMode(zoneToEdit, zoneId);
            }
            else if (result.isDenied) {
                var zoneToEdit = getZoneById(zoneId);
                if (!zoneToEdit) {
                    Swal.fire({
                        text: '@DbResHtml.T("Selected zone not found", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                    return;
                }

                openEditZoneModal(null, zoneId, false);
            }
        });
    }

    function getZoneById(zoneId) {
        var ignoreZonesLayer = mapVars.map.getLayers().getArray().find(layer =>
            layer instanceof ol.layer.Vector && layer.get('title') === 'Detection Ignore Zones'
        );       

        var features = ignoreZonesLayer.getSource().getFeatures();
        var selectedZone = features.find(function (feature) {
            return feature.get('id') === zoneId;
        });
        return selectedZone;
    }

    function focusOnSelectedZone(zone) {
        var originalZIndex = $('#map-sidebar').css('z-index');
        var extent = zone.getGeometry().getExtent();

        if (extent[0] === Infinity && extent[1] === Infinity && extent[2] === -Infinity && extent[3] === -Infinity)
        {
            Swal.fire({
                text: '@DbResHtml.T("Invalid extent for the layer", "Resources")',
                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                didOpen: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                willClose: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                allowOutsideClick: false,
                icon: "error"
            });
            return;
        }

        var padding = [50, 50, 50, 50];
        mapVars.map.getView().fit(extent, {
            padding: padding,
            duration: 1000
        });
    }

    function enableEditZoneMode(zone, zoneId) {
        cleanUpEditZoneMode();
        originalGeometry = zone.getGeometry().clone();

        if (currentFocusedPolygon === null) {
            currentFocusedPolygon = zone;
            let zoneName = zone.get('zoneName');
            zone.setStyle(createFocusedStyle(zoneName));
        }

        if (currentFocusedPolygon !== zone) {
            let zoneName = currentFocusedPolygon.get('zoneName');
            let zoneIsEnabled = currentFocusedPolygon.get('isEnabled');
            currentFocusedPolygon.setStyle(defaultStyle(zoneName, zoneIsEnabled));
            currentFocusedPolygon = zone;
        }

        modifyInteraction = new ol.interaction.Modify({
            features: new ol.Collection([zone])
        });
        mapVars.map.addInteraction(modifyInteraction);

        let zoneName = zone.get('zoneName');
        zone.setStyle(createFocusedStyle(zoneName));

        $("#editNotify").removeClass("d-none").fadeIn(300);
        $("#finishEditingButton").off('click').on('click', function () {
            handleFinishEditingButtonClick(zone, zoneId);
        });
        $("#cancelEditingButton").off('click').on('click', function () {
            handleCancelEditingButtonClick(zone);
        });
    }

    function handleCancelEditingButtonClick(zone) {        
        let zoneName = zone.get('zoneName');
        let zoneIsEnabled = zone.get('isEnabled');
        if (zone && originalGeometry) {
            zone.setGeometry(originalGeometry.clone());
        }
        if (zone) {
            zone.setStyle(defaultStyle(zoneName, zoneIsEnabled));
        }
        cleanUpEditZoneMode();

        $("#editNotify").fadeOut(300, function () {
            $(this).addClass("d-none");
        });
        currentFocusedPolygon = null;
    }

    function handleFinishEditingButtonClick(zone, zoneId) {
        cleanUpEditZoneMode();
        $("#editNotify").fadeOut(300, function () {
            $(this).addClass("d-none");
        });

        
        var geoJsonFormat = new ol.format.GeoJSON();
        var finalGeoJson = geoJsonFormat.writeFeature(zone);

        openEditZoneModal(finalGeoJson, zoneId, true);
    }

    function openEditZoneModal(geoJson, zoneId, useGeoJson = true) {
        var originalZIndex = $('#map-sidebar').css('z-index');
        $.ajax({
            type: "POST",
            url: "@Url.Action("GetIgnoreZoneById", "DetectionIgnoreZones", new { Area = "IntranetPortal" })",
            data: { id: zoneId },
            success: function (data) {
                if (data !== undefined && data !== null) {
                    if (data.isSuccess === false && data.errMsg !== null) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            didOpen: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    } else {
                        fillEditZoneModalBody(data.data, useGeoJson ? geoJson : null);
                        $('#editZoneModal').modal({
                            backdrop: 'static',
                            keyboard: false
                        });
                        $('.modal-backdrop').css({
                            'background-color': 'black',
                            'opacity': '0.8',
                            'z-index': '1050'
                        });
                        $("#editZoneModal").data("useGeoJson", useGeoJson).modal('show');
                    }
                } else {
                    Swal.fire({
                        text: '@DbResHtml.T("No data received", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        didOpen: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        willClose: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            },
            error: function (req, status, error) {
                Swal.fire({
                    text: '@DbResHtml.T("Error occurred", "Resources")',
                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                    didOpen: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    willClose: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    allowOutsideClick: false,
                    icon: "error"
                });
            }
        });

    }

    function fillEditZoneModalBody(zone, geoJson){
        var modalBody = $("#editZoneModalBody");
        modalBody.html("");
        var html = `<form id="editPolygonForm">
                            <input type="hidden" class="form-control" id="editZoneId">
                            <div class="form-group">
                                <label for="editZoneName">@DbResHtml.T("Name", "Resources")</label>
                                <input type="text" class="form-control" id="editZoneName" required>
                            </div>
                            <div class="form-group">
                                <label for="editZoneDescription">@DbResHtml.T("Description", "Resources")</label>
                                <input type="text" class="form-control" id="editZoneDescription" required>
                            </div>
                            <div class="form-group clearfix">
                                <div class="icheck-warning mt-3 text-bold">
                                    <input type="checkbox" id="isEditZoneEnabled" />
                                    <label for="isEditZoneEnabled">
                                        @DbResHtml.T("Is Enabled", "Resources")
                                    </label>
                                </div>
                            </div>
                            <input type="hidden" id="editedPolygonCoordinates">
                        </form>`;

        modalBody.append(html);
        $("#editedPolygonCoordinates").val(JSON.stringify(geoJson));
        $("#editZoneName").val(zone.name);
        $("#editZoneId").val(zone.id);
        $("#editZoneDescription").val(zone.description);
        $("#isEditZoneEnabled").prop('checked', zone.isEnabled);
    }

    function closeEditZoneModal() {
        cleanUpEditZoneMode();
        let zoneName = currentFocusedPolygon.get('zoneName');
        let zoneIsEnabled = currentFocusedPolygon.get('isEnabled');
        if (currentFocusedPolygon && originalGeometry) {
            currentFocusedPolygon.setGeometry(originalGeometry.clone());
        }
        if (currentFocusedPolygon) {
            currentFocusedPolygon.setStyle(defaultStyle(zoneName, zoneIsEnabled));
        }
        currentFocusedPolygon = null;
        $("#editedPolygonCoordinates").val('');
        $("#editZoneModal").modal('hide');
    }

    function saveEditZone() {
        var originalZIndex = $('#map-sidebar').css('z-index');
        var id = $("#editZoneId").val();
        var name = $("#editZoneName").val();
        var description = $("#editZoneDescription").val();
        var isEnabled = $("#isEditZoneEnabled").prop("checked");

        if (name === '' || description === '') {
            $("#polygonModal").modal('hide');
            Swal.fire({
                text: '@DbResHtml.T("All fields are required", "Resources")',
                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                didOpen: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                willClose: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                allowOutsideClick: false,
                icon: "warning"
            });            
            return;
        }

        var formattedGeoJson = null;
        if ($("#editZoneModal").data("useGeoJson")) {
            var geoJsonString = $("#editedPolygonCoordinates").val();
            var geoJsonObject = JSON.parse(geoJsonString);
            var geoJsonFormat = new ol.format.GeoJSON();
            var feature = geoJsonFormat.readFeature(geoJsonObject);
            formattedGeoJson = geoJsonFormat.writeFeature(feature);
        }
        $.ajax({
            type: "POST",
            url: "@Url.Action("UpdateIgnoreZone", "DetectionIgnoreZones", new { Area = "IntranetPortal" })",
            data: JSON.stringify({
                Id: id,
                Name: name,
                Description: description,
                EnteredZonePolygon: formattedGeoJson,
                IsEnabled: isEnabled
            }),
            contentType: "application/json",
            success: function (data) {
                $("#editZoneModal").modal('hide');
                if (data != undefined || data != null) {
                    if (data.isSuccess == false && data.errMsg != null) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            didOpen: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                    else {                        
                        Swal.fire({
                            text: '@DbResHtml.T("Detection ignore zone updated successfully", "Resources")',
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            didOpen: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "success"
                        }).then((result) => {
                            if (result.isConfirmed) {
                                resetEditModalInputValues();
                                getAllIgnoreZones();
                                generateDetectionIgnoreZonesTable();
                            }
                        });

                    }
                }
                else {
                    Swal.fire({
                        text: `@DbResHtml.T("No data received", "Resources")`,
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        didOpen: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        willClose: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            },
            error: function () {
                $("#editZoneModal").modal('hide');
                Swal.fire({
                    text: '@DbResHtml.T("Error occurred while saving", "Resources")',
                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                    didOpen: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    willClose: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    allowOutsideClick: false,
                    icon: "error"
                });
            }
        });
    }
    
    function resetEditModalInputValues() {
        $("#editZoneName").val('');
        $("#editZoneDescription").val('');
        $("#isEditZoneEnabled").prop("checked", false);
        $("#editedPolygonCoordinates").val('');
        $("#editZoneId").val('');
    }

    function cleanUpEditZoneMode() {
        if (modifyInteraction) {
            mapVars.map.removeInteraction(modifyInteraction);
            modifyInteraction = null;
        }
    }

    //2.add new ignore zone btn click functions 
    var draw;
    var source = new ol.source.Vector({ wrapX: false });

    function addNewZone() {
        var originalZIndex = $('#map-sidebar').css('z-index');
        if (!draw) {
            drawZonePolygonOnMap();
        } else {
            Swal.fire({
                text: '@DbResHtml.T("Please finish the current drawing first.", "Resources")',
                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                didOpen: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                willClose: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                allowOutsideClick: false,
                icon: "warning"
            });
        }
    }

    function drawZonePolygonOnMap() {
        cleanupDrawInteraction();
        
        $("#addNotify").removeClass("d-none").fadeIn(300);
        draw = new ol.interaction.Draw({
            source: source,
            type: 'Polygon',
            style: createFocusedStyle(),
            projection: mapVars.projection           
            // projection: "EPSG:3857"           
        });

        mapVars.map.addInteraction(draw);
        $("#cancelAddingZoneBtn").off('click').on('click', function () {
            cancelAddingZone();
        });
               
        draw.on('drawend', function (event) {      
           
            var geoJsonFormat = new ol.format.GeoJSON();
            var geoJson = geoJsonFormat.writeFeature(event.feature);
            cleanupDrawInteraction();
            $("#addNotify").fadeOut(300, function () {
                $(this).addClass("d-none");
            });
            openAddPolygonModal(geoJson);

        });
    }
    
    function openAddPolygonModal(geoJson) {
        $("#polygonCoordinates").val(JSON.stringify(geoJson));
        $('#polygonModal').modal({
            backdrop: 'static',
            keyboard: false
        });
        $('.modal-backdrop').css({
            'background-color': 'black',
            'opacity': '0.8',
            'z-index': '1050'
        });
        
        $("#polygonModal").modal('show');
    }

    function closeAddPolygonModal() {       
        cleanupDrawInteraction();        
        $("#polygonModal").modal('hide');
        resetAddModalInputValues();
    }

    function cancelAddingZone() {
        $("#addNotify").fadeOut(300, function () {
            $(this).addClass("d-none");
        });
        cleanupDrawInteraction();
    }

    function savePolygon() {       
        var originalZIndex = $('#map-sidebar').css('z-index');
        var name = $("#zoneName").val();
        var description = $("#zoneDescription").val();
        var isEnabled = $("#isZoneEnabled").prop("checked");
        var geoJsonString = $("#polygonCoordinates").val();
        if (geoJsonString === '') {
            $("#polygonModal").modal('hide');
            Swal.fire({
                text: '@DbResHtml.T("Please enter polygon", "Resources")',
                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                didOpen: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                willClose: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                allowOutsideClick: false,
                icon: "warning"
            });
            resetAddModalInputValues();
            return;
        }
        var geoJsonObject = JSON.parse(geoJsonString); 
        var geoJsonFormat = new ol.format.GeoJSON();
        var feature = geoJsonFormat.readFeature(geoJsonObject);
        var formattedGeoJson = geoJsonFormat.writeFeature(feature);
        if (name === '' || description === '') {
            $("#polygonModal").modal('hide');
            Swal.fire({
                text: '@DbResHtml.T("All fields are required", "Resources")',
                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                didOpen: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                willClose: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                allowOutsideClick: false,
                icon: "warning"
            });
            resetAddModalInputValues();
            return;
        }
        $.ajax({
            type: "POST",
            url: "@Url.Action("AddIgnoreZone", "DetectionIgnoreZones", new { Area = "IntranetPortal" })",
            data: JSON.stringify({
                Name: name,
                Description: description,
                EnteredZonePolygon: formattedGeoJson,
                IsEnabled: isEnabled
            }),
            contentType: "application/json",
            success: function (data) {
                $("#polygonModal").modal('hide');
                if (data != undefined || data != null) {
                    if (data.isSuccess == false && data.errMsg != null) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            didOpen: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                    else {     
                        Swal.fire({
                            text: '@DbResHtml.T("Detection ignore zone saved successfully", "Resources")',
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            didOpen: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "success"
                        }).then((result) => {
                            if (result.isConfirmed) {     
                                resetAddModalInputValues();
                                getAllIgnoreZones();
                                generateDetectionIgnoreZonesTable();
                            }
                        });
                        
                    }
                }
                else {                    
                    Swal.fire({
                        text: `@DbResHtml.T("No data received", "Resources")`,
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        didOpen: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        willClose: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            },
            error: function () {
                $("#polygonModal").modal('hide');
                Swal.fire({
                    text: '@DbResHtml.T("Error occurred while saving", "Resources")',
                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                    didOpen: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    willClose: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    allowOutsideClick: false,
                    icon: "error"
                });
            }
        });
    }

    function cleanupDrawInteraction() {
        if (draw) {
            source.clear();
            mapVars.map.removeInteraction(draw);
            draw = null;
        }
    }

    function resetAddModalInputValues() {
         $("#zoneName").val('');
         $("#zoneDescription").val('');
         $("#isZoneEnabled").prop("checked", false);
         $("#polygonCoordinates").val('');
    }


    //3.focus on ignore zone btn click functions
    var currentFocusedPolygon = null;

    function defaultStyle(text, isEnabled) {
        const styleOptions = {
            fill: new ol.style.Fill({
                color: isEnabled ? 'rgba(152, 133, 88, 0.4)' : 'rgba(255, 204, 51, 0.2)'
            }),
            stroke: new ol.style.Stroke({
                color: isEnabled ? '#988558' : '#ffcc33',
                width: 2
            })
        };

        if (text) {
            styleOptions.text = new ol.style.Text({
                font: '14px Calibri,sans-serif',
                fill: new ol.style.Fill({ color: '#000' }),
                stroke: new ol.style.Stroke({
                    color: '#fff', width: 2
                }),
                text: text
            });
        }

        return new ol.style.Style(styleOptions);
    }

    function createFocusedStyle(text) {
        const styleOptions = {
            fill: new ol.style.Fill({
                color: 'rgba(0, 0, 255, 0.2)'
            }),
            stroke: new ol.style.Stroke({
                color: 'blue',
                width: 2
            }),
            image: new ol.style.Circle({
                radius: 5,
                fill: new ol.style.Fill({
                    color: 'rgba(0, 0, 255)',
                })
            }),
        };

        if (text) {
            styleOptions.text = new ol.style.Text({
                font: '14px Calibri,sans-serif',
                fill: new ol.style.Fill({ color: '#000' }),
                stroke: new ol.style.Stroke({
                    color: '#fff', width: 2
                }),
                text: text
            });
        }

        return new ol.style.Style(styleOptions);
     }
    
    function focusOnIgnoreZone(zoneId) {
        var originalZIndex = $('#map-sidebar').css('z-index');
        $.ajax({
            type: "POST",
            url: "@Url.Action("GetIgnoreZoneById", "DetectionIgnoreZones", new { Area = "IntranetPortal" })",
            data: { id: zoneId },
            success: function (data) {
                if (data !== undefined && data !== null) {
                    if (data.isSuccess === false && data.errMsg !== null) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            didOpen: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    } else {
                        proceedFocusSelectedZone(data.data);
                    }
                } else {
                    Swal.fire({
                        text: '@DbResHtml.T("No data received", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        didOpen: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        willClose: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            },
            error: function (req, status, error) {
                Swal.fire({
                    text: '@DbResHtml.T("Error occurred", "Resources")',
                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                    didOpen: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    willClose: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    allowOutsideClick: false,
                    icon: "error"
                });
            }
        });
    }

    function proceedFocusSelectedZone(ignoreZone) {
        var originalZIndex = $('#map-sidebar').css('z-index');

        if (ignoreZone && ignoreZone.geoJson) {
            var ignoreZonesLayer = mapVars.map.getLayers().getArray().find(layer =>
                layer instanceof ol.layer.Vector && layer.get('title') === 'Detection Ignore Zones'
            );

            if (ignoreZonesLayer) {
                var features = ignoreZonesLayer.getSource().getFeatures();

                features.forEach(function (feature) {
                    feature.setStyle(defaultStyle(feature.get('zoneName'), feature.get('isEnabled')));
                });

                var selectedFeature = features.find(function (feature) {
                    return feature.get('id') === ignoreZone.id;
                });

                if (selectedFeature) {
                    selectedFeature.setStyle(createFocusedStyle(ignoreZone.name));

                    var extent = selectedFeature.getGeometry().getExtent();
                    mapVars.map.getView().fit(extent, {
                        padding: [150, 150, 150, 150],
                        duration: 1000
                    });

                    currentFocusedPolygon = selectedFeature;
                } else {
                    Swal.fire({
                        text: '@DbResHtml.T("Selected ignore zone not found", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        didOpen: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        willClose: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            } else {
                Swal.fire({
                    text: '@DbResHtml.T("Ignore Zones layer not found", "Resources")',
                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                    didOpen: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    willClose: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    allowOutsideClick: false,
                    icon: "error"
                });
            }
        } else {
            Swal.fire({
                text: '@DbResHtml.T("Invalid ignore zone data or missing geoJson", "Resources")',
                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                didOpen: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                willClose: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                allowOutsideClick: false,
                icon: "error"
            });
        }
    }

    function resetAllFeaturesToDefaultStyle() {
        var ignoreZonesLayer = mapVars.map.getLayers().getArray().find(layer =>
            layer instanceof ol.layer.Vector && layer.get('title') === 'Detection Ignore Zones'
        );

        if (ignoreZonesLayer) {
            ignoreZonesLayer.getSource().getFeatures().forEach(function (feature) {
                let zoneName = feature.get('zoneName'); 
                let zoneIsEnabled = feature.get('isEnabled');
                feature.setStyle(defaultStyle(zoneName, zoneIsEnabled));
            });
        }

        currentFocusedPolygon = null;
    }

    //4.delete ignore zone btn click functions
    function deleteIgnoreZone(zoneId){
        var originalZIndex = $('#map-sidebar').css('z-index');
        Swal.fire({
            text: '@DbResHtml.T("Are you sure you want to delete this ignore zone?", "Resources")',
            confirmButtonText: '@DbResHtml.T("Delete", "Resources")',
            showCancelButton: true,
            customClass: {
                confirmButton: 'bg-gradient-danger',
                cancelButton: 'bg-gradient-secondary'
            },
            didOpen: () => {
                manageMapSidebarZIndex(originalZIndex, '1040');
            },   
            willClose: () => {
                manageMapSidebarZIndex(originalZIndex, '1040');
            },
            allowOutsideClick: false,
            icon: "warning"
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("DeleteIgnoreZone", "DetectionIgnoreZones", new { Area = "IntranetPortal" })",
                    data: { id: zoneId },
                    success: function (data) {
                        if (data !== undefined && data !== null) {
                            if (data.isSuccess === false && data.errMsg !== null) {
                                Swal.fire({
                                    text: `${data.errMsg}`,
                                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                    willClose: () => {
                                        manageMapSidebarZIndex(originalZIndex, '1040');
                                    },
                                    allowOutsideClick: false,
                                    icon: "error"
                                });
                            } else {
                                Swal.fire({
                                    text: '@DbResHtml.T("Detection ignore zone deleted successfully", "Resources")',
                                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                    willClose: () => {
                                        manageMapSidebarZIndex(originalZIndex, '1040');
                                    },
                                    allowOutsideClick: false,
                                    icon: "success"
                                }).then((result) => {
                                    //location.reload();
                                    getAllIgnoreZones();
                                    generateDetectionIgnoreZonesTable();
                                });
                            }
                        } else {
                            Swal.fire({
                                text: '@DbResHtml.T("No data received", "Resources")',
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                willClose: () => {
                                    manageMapSidebarZIndex(originalZIndex, '1040');
                                },
                                allowOutsideClick: false,
                                icon: "error"
                            });
                        }
                    },
                    error: function (req, status, error) {
                        Swal.fire({
                            text: '@DbResHtml.T("Error occurred", "Resources")',
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                });
            }
        });
        
    }


    //5.others
    function manageMapSidebarZIndex(originalZIndex, newZIndex) {
        $('#map-sidebar').css('z-index', newZIndex);

        return function () {
            $('#map-sidebar').css('z-index', originalZIndex);
        };
    }

    function getAllIgnoreZones() {
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAlllIgnoreZones", "DetectionIgnoreZones", new { Area = "IntranetPortal" })",
            success: function (data) {
                if (data != undefined || data != null) {
                    if (data.isSuccess === false && data.errMsg !== null) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    } else {
                        removeIgnoreZonesLayer();                       
                        if (data.data.length > 0) {
                            createIgnoreZonesLayerAndShowOnMap(data.data);
                        }
                    }
                } else {
                    Swal.fire({
                        text: `@DbResHtml.T("No data received", "Resources")`,
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            },
            error: function (req, status, error) {
                Swal.fire({
                    text: '@DbResHtml.T("Error occurred", "Resources")',
                    icon: "error"
                });
            }
        });
    }

    function createIgnoreZonesLayerAndShowOnMap(ignoreZonesList) {
        var vectorSource = new ol.source.Vector();
        var extent = ol.extent.createEmpty();

        ignoreZonesList.forEach(function (zone, index) {
            var geoJsonObj = JSON.parse(zone.geoJson);
            var olGeoJson = new ol.format.GeoJSON();
            var feature = olGeoJson.readFeature(geoJsonObj, {
                dataProjection: mapVars.projection,
                featureProjection: mapVars.projection
            });
            feature.set('id',zone.id);
            feature.set('zoneName',zone.name);
            feature.set('isEnabled', zone.isEnabled);
            feature.setStyle(defaultStyle(feature.get('zoneName'), feature.get('isEnabled')));

            vectorSource.addFeature(feature);
            ol.extent.extend(extent, vectorSource.getExtent());
        });

        var vectorLayer = new ol.layer.Vector({
            source: vectorSource,
            title: 'Detection Ignore Zones'          
        });

        mapVars.map.addLayer(vectorLayer);

        if (vectorSource.getFeatures().length > 0) {
            mapVars.map.getView().fit(extent, { size: mapVars.map.getSize() });
        }
    }

    function removeIgnoreZonesLayer() {
        mapVars.map.getLayers().forEach(function (layer) {
            if (layer instanceof ol.layer.Vector && layer.get('title') === 'Detection Ignore Zones') {
                mapVars.map.removeLayer(layer);
            }
        });
    }
</script>
