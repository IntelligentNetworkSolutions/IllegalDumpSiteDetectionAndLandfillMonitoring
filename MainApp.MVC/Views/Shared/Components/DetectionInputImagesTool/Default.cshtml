@model Guid?
@using DTOs.MainApp.BL.DetectionDTOs
@using MainApp.MVC.Helpers;
@using Westwind.Globalization
@using Westwind.Globalization.AspNetCore.Extensions
@using Westwind.Globalization.AspNetCore
@using Newtonsoft.Json


<script type="text/javascript">
    $(function () {
        function activateDetectionInputImagesTool() {
            mapVars.deactivateTools();
            $("#map-sidebar-detectioninputimagestool-pane").addClass("active");
            var groupLayer = mapVars.findLayerByName('DetectionRunImages');
            if (groupLayer) {
                var layers = groupLayer.getLayers().getArray();
                layers.forEach(function (layer) {
                    var layerId = layer.get('imgId');
                    selectCheckboxByImgId(layerId);
                });
            }
        }

        function deactivateDetectionInputImagesTool() {
            this.isActive = false;
            $("#map-sidebar-detectioninputimagestool-pane").removeClass("active");
            return true;
        }

        var detectionInputImagesTool = new MapToolBaseClass("DetectionInputImagesTool");
        detectionInputImagesTool.activateTool = activateDetectionInputImagesTool;
        detectionInputImagesTool.deactivateTool = deactivateDetectionInputImagesTool;
        detectionInputImagesTool.defaultFitPadding = [30, 580, 30, 30];

        mapVars.mapTools.push(detectionInputImagesTool);

        var tabHtml = `<li>
                         <a href="#map-sidebar-detectioninputimagestool-pane" id="map-sidebar-detectioninputimagestool-btn" role="tab" data-toggle="tooltip" data-trigger="hover" data-placement="left" title="" data-original-title="@DbResHtml.T("Detection Input Images Tool", "Resources")"><i class="fg-search-feature fg-lg"></i></a>
                      </li>`;

        var paneHtml = `<div class="turbosidebar-pane" id="map-sidebar-detectioninputimagestool-pane">
                                        <h1 class="turbosidebar-header text-center">
                                            @DbResHtml.T("Detection Input Images", "Resources")
                                            <span class="turbosidebar-close"><i class="fa fa-times"></i></span>
                                        </h1>
                                            <div id="map-sidebar-detectioninputimagesTable-tab-container"></div>
                                    </div>`;

        $("#map-sidebar-upper-tabs-list").append(tabHtml);
        $("#map-sidebar-content").append(paneHtml);

        $("#map-sidebar-historicdata-pane-selector").on("change", function () {
            $("#map-sidebar-historicdata-tab-container .tab-pane").removeClass("active");
            $("#" + this.value).addClass("active");
        });

        $("#map-sidebar-detectioninputimagestool-btn").on("click", function () {
            if ($(this).parent().hasClass("active")) {
                detectionInputImagesTool.deactivateTool();
            }
            else {
                detectionInputImagesTool.activateTool();
            }
        });
        generateDetectionInputImagesTable();
    });

    //Draw table functions
    function generateDetectionInputImagesTable() {
        var originalZIndex = $('#map-sidebar').css('z-index');
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAllDetectionInputImages", "Detection", new { Area = "IntranetPortal" })",
            success: function (data) {
                var detectionInputImagesTable = "";
                if (data != undefined || data != null) {
                    if (data.isSuccess == false && data.errMsg != null) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            didOpen: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                    else {
                        if (data.data.length == 0) {
                            showEmptyImagesTable(detectionInputImagesTable)
                        }
                        else {
                            showTableOfAllInputImages(detectionInputImagesTable, data.data);
                        }
                    }
                }
                else {
                    Swal.fire({
                        text: `@DbResHtml.T("No data received", "Resources")`,
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        didOpen: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        willClose: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            },
            error: function (req, status, error) {
                Swal.fire({
                    text: '@DbResHtml.T("Error occured", "Resources")',
                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                    didOpen: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    willClose: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    allowOutsideClick: false,
                    icon: "error"
                });
            }
        });
    }

    function showEmptyImagesTable(detectionInputImagesTable) {
        detectionInputImagesTable +=
            `  <table class='table table-striped table-bordered table-hover mt-4'>
                                                <thead>
                                                    <tr>
                                                        <th>@DbResHtml.T("Name", "Resources")</th>
                                                        <th>@DbResHtml.T("Date Taken", "Resources")</th>
                                                        <th>@DbResHtml.T("Created By", "Resources")</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    <tr>
                                                       <td colspan="4" class="text-center">@DbResHtml.T("No data available.", "Resources")</td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        `
        $("#map-sidebar-detectioninputimagesTable-tab-container").html(detectionInputImagesTable);
    }

    function showTableOfAllInputImages(detectionInputImagesTable, inputImagesList) {
        detectionInputImagesTable +=
            `<table class='table table-striped table-bordered table-hover mt-4' id='detectionInputImagesTable'>
                                            <thead>
                                                <tr>
                                                    <th>@DbResHtml.T("Name", "Resources")</th>
                                                    <th>@DbResHtml.T("Date Taken", "Resources")</th>
                                                    <th>@DbResHtml.T("Created By", "Resources")</th>
                                                    <th></th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                     `;
        detectionInputImagesTable = drawTableRowsForEachInputImage(inputImagesList, detectionInputImagesTable);
        detectionInputImagesTable += `</tbody></table>`;
        detectionInputImagesTable +=
            `<div class="text-center">
                                <a onclick="triggerShowOnMapInputImage()" id="showOnMapBtnInputImage" class="mr-2 btn bg-gradient-success"  title="@DbResHtml.T("Show on map", "Resources")">@DbResHtml.T("Show on map", "Resources")</a>
                            </div>
                        `;
        $("#map-sidebar-detectioninputimagesTable-tab-container").html(detectionInputImagesTable);
    }

    function drawTableRowsForEachInputImage(inputImagesList, detectionInputImagesTable) {
        
        inputImagesList.forEach(function (item) {
            detectionInputImagesTable +=
                `<tr>
                                                 <td hidden>${item.id}</td>
                                                 <td class="text-nowrap overflow-auto" style="max-width: 220px;" title="${item.name}">${item.name}</td>
                                                 <td>${new Date(item.dateTaken).toLocaleDateString('en-GB').replace(/\//g, '.')}</td>
                                                 <td>${item.createdBy.userName}</td>
                                                 <td>
                                                   <div class="form-group clearfix">
                                                        <div class="icheck-dark mt-3 text-bold">
                                                              <input type="checkbox" id="inputImage_${item.id}" name="inputImage_${item.id}">
                                                              <label for="inputImage_${item.id}"></label>
                                                        </div>
                                                   </div>
                                                  </td>
                                             </tr>
                                            `
        });
        return detectionInputImagesTable;
    }

    //Show on map btn click functions 

    function triggerShowOnMapInputImage() {
        var selectedImagesIds = getSelectedInputImagesIds();        
        var originalZIndex = $('#map-sidebar').css('z-index');
        if (selectedImagesIds.length === 0) {
            Swal.fire({
                text: '@DbResHtml.T("No input image/s selected", "Resources")',
                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                didOpen: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                willClose: () => {
                    manageMapSidebarZIndex(originalZIndex, '1040');
                },
                allowOutsideClick: false,
                icon: "warning"
            });
            return;
        }
        $.ajax({
            type: "POST",
            data: {
                selectedImagesIds: selectedImagesIds,
            },
            url: "@Url.Action("GetSelectedDetectionInputImages", "Detection", new { Area = "IntranetPortal" })",
            success: function (data) {                
                if (data != undefined || data != null) {
                    if (data.isSuccess == false && data.errMsg != null) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            didOpen: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            willClose: () => {
                                manageMapSidebarZIndex(originalZIndex, '1040');
                            },
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                    else {
                        if (data.data.length == 0) {
                            Swal.fire({
                                text: `@DbResHtml.T("No images found", "Resources")`,
                                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                didOpen: () => {
                                    manageMapSidebarZIndex(originalZIndex, '1040');
                                },
                                willClose: () => {
                                    manageMapSidebarZIndex(originalZIndex, '1040');
                                },
                                allowOutsideClick: false,
                                icon: "warning"
                            });
                        }
                        else {
                            var groupLayer = mapVars.findLayerByName('DetectionRunImages');                            
                            if (!groupLayer) {
                                Swal.fire({
                                    text: `@DbResHtml.T("Detection run images map layer not found", "Resources")`,
                                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                                    didOpen: () => {
                                        manageMapSidebarZIndex(originalZIndex, '1040');
                                    },
                                    willClose: () => {
                                        manageMapSidebarZIndex(originalZIndex, '1040');
                                    },
                                    allowOutsideClick: false,
                                    icon: "error"
                                });
                            }
                            else{
                                groupLayer.getLayers().clear();
                                var combinedExtent = ol.extent.createEmpty();

                                var inputImageList = data.data;
                                inputImageList.forEach(function (inputImage, index) {
                                    const source = new ol.source.GeoTIFF({
                                        sources: [
                                            {
                                                url: inputImage.imagePath
                                            },
                                        ],
                                    });
                                    
                                    var newLayer = new ol.layer.WebGLTile({
                                        source: source,
                                        imgId: inputImage.id,
                                        name: inputImage.name,
                                        projection: mapVars.projection,
                                        title: inputImage.name,
                                        order: index + 1,
                                        visible: true
                                    })
                                    
                                    groupLayer.getLayers().push(newLayer);                                   
                                         
                                    source.on('change', () => {
                                        if (source.getState() === 'ready') {
                                            const extent = source.getTileGrid().getExtent();
                                            ol.extent.extend(combinedExtent, extent);
                                            mapVars.map.getView().fit(combinedExtent, mapVars.map.getSize());
                                        }
                                    });
                                });
                                groupLayer.set('displayInLayerSwitcher', true);
                            }

                        }
                    }
                }
                else {
                    Swal.fire({
                        text: `@DbResHtml.T("No data received", "Resources")`,
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        didOpen: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        willClose: () => {
                            manageMapSidebarZIndex(originalZIndex, '1040');
                        },
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            },
            error: function (req, status, error) {
                Swal.fire({
                    text: '@DbResHtml.T("Error occured", "Resources")',
                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                    didOpen: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    willClose: () => {
                        manageMapSidebarZIndex(originalZIndex, '1040');
                    },
                    allowOutsideClick: false,
                    icon: "error"
                });
            }
        });
    }

    function getSelectedInputImagesIds() {
        let selectedInputImagesIds = [];
        $('#detectionInputImagesTable tbody tr').each(function () {
            if ($(this).find('input[type="checkbox"]').prop('checked')) {
                var id = $(this).find('td:first').text().trim();
                selectedInputImagesIds.push(id);
            }
        });
        return selectedInputImagesIds;
    }

    //Other functions
    function manageMapSidebarZIndex(originalZIndex, newZIndex) {
        $('#map-sidebar').css('z-index', newZIndex);
        return function () {
            $('#map-sidebar').css('z-index', originalZIndex);
        };
    }    

    function selectCheckboxByImgId(imgId) {
        $('#detectionInputImagesTable tbody tr').each(function () {
            var imageId = $(this).find('td:nth-child(1)').text().trim();
            if (imageId === imgId) {
                $(this).find('input[type="checkbox"]').prop('checked', true);
            }
        });
    }

</script>
