@model Guid?
@using DTOs.MainApp.BL.DetectionDTOs
@using MainApp.MVC.Helpers;
@using Westwind.Globalization
@using Westwind.Globalization.AspNetCore.Extensions
@using Westwind.Globalization.AspNetCore
@using Newtonsoft.Json

<script type="text/javascript">
    $(function () {
        function activateHistoricDataTool() {
            mapVars.deactivateTools();
            $("#map-sidebar-historicdata-pane").addClass("active");
        }

        function deactivateHistoricDataTool() {
            this.isActive = false;
            $("#map-sidebar-historicdata-pane").removeClass("active");
            return true;
        }

        var historicData = new MapToolBaseClass("HistoricData");
        historicData.activateTool = activateHistoricDataTool;
        historicData.deactivateTool = deactivateHistoricDataTool;
        historicData.defaultFitPadding = [30, 580, 30, 30];

        mapVars.mapTools.push(historicData);

        var tabHtml = `<li>
                          <a href="#map-sidebar-historicdata-pane" id="map-sidebar-historicdata-btn" role="tab" data-toggle="tooltip" data-trigger="hover" data-placement="left" title="" data-original-title="@DbResHtml.T("Historic Data", "Resources")"><i class="fas fa-history"></i></a>
                      </li>`;

        var paneHtml = `<div class="turbosidebar-pane" id="map-sidebar-historicdata-pane">
                                        <h1 class="turbosidebar-header text-center">
                                             @DbResHtml.T("Historic Data", "Resources")
                                            <span class="turbosidebar-close"><i class="fa fa-times"></i></span>
                                        </h1>                                              
                                        <div id="map-sidebar-historicdatatable-tab-container"></div>
                                    </div>`;

        $("#map-sidebar-upper-tabs-list").append(tabHtml);
        $("#map-sidebar-content").append(paneHtml);
        $('#map-sidebar-gotocoordinatestool-btn').tooltip();

        $("#map-sidebar-historicdata-pane-selector").on("change", function () {
            $("#map-sidebar-historicdata-tab-container .tab-pane").removeClass("active");
            $("#" + this.value).addClass("active");
        });

        $("#map-sidebar-historicdata-btn").on("click", function () {
            if ($(this).parent().hasClass("active")) {
                historicData.deactivateTool();
            }
            else {
                historicData.activateTool();
            }
        });
        
        generateDetectionRunsTable();
    });

    function triggerAreaComparisonAvgConfidenceRate(){
        let selectedDetectionRunsIds = getSelectedDetectionRunIds();
        if (selectedDetectionRunsIds.length === 0) {
            Swal.fire({
                text: '@DbResHtml.T("Select detection run/s first", "Resources")',
                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                allowOutsideClick: false,
                icon: "warning"
            });
            return;
        }
        $("#areaComparisonAvgConfidenceRateModal").empty();
        generateAreaComparisonAvgConfidenceRateModal();
    }

    function generateAreaComparisonAvgConfidenceRateReport() {
        $("#areaComparisonReportTable").empty();
        const selectedConfidenceRate = $("#conf_rate_aria_comparison_report").val();
        let selectedDetectionRunsIds = getSelectedDetectionRunIds();
        var generatingReportIcon = ` <div class="col-4 offset-4"><div class="small-box bg-info">                 
                  <div class="overlay dark">
                    <i class="fas fa-3x fa-sync-alt"></i>
                  </div>
                  <div class="inner">
                    <cite>${selectedConfidenceRate} % - Confidence rate</cite>
                    <p>Generating report...</p>
                  </div>
                  <div class="icon">
                    <i class="ion ion-stats-bars"></i>
                  </div>
                </div></div>`;
        $("#areaComparisonReportTable").append(generatingReportIcon);
        $.ajax({
            type: "POST",
            url: "@Url.Action("GenerateAreaComparisonAvgConfidenceRateReport", "Detection", new { Area = "IntranetPortal" })",
            data: {
                selectedDetectionRunsIds: selectedDetectionRunsIds,
                selectedConfidenceRate: selectedConfidenceRate
            },
            success: function (data) {
                if (data != undefined || data != null) {
                    if (data.isSuccess == false && data.errMsg != null) {
                        Swal.fire({
                            text: `${data.errMsg}`,
                            confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                            allowOutsideClick: false,
                            icon: "error"
                        });
                    }
                    else {
                        $("#areaComparisonReportTable").empty();
                        data.data.forEach(row => {
                            var tableHtml = "";
                            tableHtml += `
                              <div class="card mb-5">
                                <div class="card-header bg-gradient-dark text-white">
                                   <h5 class="card-title">${row.detectionRunName}</h5>
                                 </div>
                                 <div class="card-body p-0">
                                 <table class='table table-sm table-striped table-bordered table-hover'>
                                    <thead>
                                        <tr>
                            `;
                            row.groupedDumpSitesList.forEach(info => {
                                tableHtml += `<th>${info.className} area in ignore zone (m²)</th> <th>${info.className} area out of ignore zone (m²)</th>`;
                            });
                            tableHtml += `<th>Total Area (m²)</th>`;
                            tableHtml += `
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                            `;
                            row.groupedDumpSitesList.forEach(info => {
                                let totalGroupAreaInIgnoreZone = info.totalGroupAreaInIgnoreZone != null ? info.totalGroupAreaInIgnoreZone.toFixed(2) : "No dump sites above the selected confidence rate";
                                let totalGroupAreaOutOfIgnoreZone = info.totalGroupAreaOutOfIgnoreZone != null ? info.totalGroupAreaOutOfIgnoreZone.toFixed(2) : "No dump sites above the selected confidence rate";

                                tableHtml += `<td>${totalGroupAreaInIgnoreZone}</td> <td>${totalGroupAreaOutOfIgnoreZone}</td>`;
                            });

                            tableHtml += `<td>${row.totalAreaOfDetectionRun != null ? row.totalAreaOfDetectionRun.toFixed(2) : 'No dump sites above the selected confidence rate'}</td>`;
                            tableHtml += `
                                        </tr>
                                    </tbody>
                                </table>
                               </div>
                              </div>
                            `;

                            $("#areaComparisonReportTable").append(tableHtml);
                        });

                    }
                }
                else {
                    Swal.fire({
                        text: `@DbResHtml.T("No data received", "Resources")`,
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    });
                }
            },
            error: function (req, status, error) {
                Swal.fire({
                    text: '@DbResHtml.T("Error occured", "Resources")',
                    confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                    allowOutsideClick: false,
                    icon: "error"
                });
            }           
        });
    }

    function triggerShowOnMap() {
        let selectedDetectionRunsIds = getSelectedDetectionRunIds();
        let selectedConfidenceRates = getSelectedConfidenceRates();
        let model = {
            selectedDetectionRunsIds: selectedDetectionRunsIds,
            selectedConfidenceRates: selectedConfidenceRates
        };
        if (selectedDetectionRunsIds.length === 0) {
            Swal.fire({
                text: '@DbResHtml.T("No detection run/s selected", "Resources")',
                confirmButtonText: '@DbResHtml.T("Ok", "Resources")',               
                allowOutsideClick: false,
                icon: "warning"
            });
            return;
        }
        $.ajax({
            type: "POST",
            url: "@Url.Action("ShowDumpSitesOnMap", "Detection", new { Area = "IntranetPortal" })",
            contentType: "application/json",
            data: JSON.stringify(model),
            // data: {
            //     // selectedDetectionRunsIds: selectedDetectionRunsIds
            // },
            success: function (response) {
                if (!response.isSuccess) {
                    Swal.fire({
                        text: '@DbResHtml.T("Selected detection runs are not found", "Resources")',
                        confirmButtonText: '@DbResHtml.T("Ok", "Resources")',
                        allowOutsideClick: false,
                        icon: "error"
                    })
                } else {
                    mapVars.map.getLayers().forEach(function (layer) {
                        if (layer instanceof ol.layer.Group && layer.get('name') === 'Historic Data') {
                            mapVars.map.removeLayer(layer);
                        }
                    });

                   
                    var historicDataLayerGroup = new ol.layer.Group({
                        title: 'Historic Data',
                        name: 'Historic Data',
                        order: 3,
                        opacity: 1,
                        visible: true,
                        openInLayerSwitcher: true,
                        fold: 'open',
                        layers: new ol.Collection([])
                    });

                    var detectionRunImagesGroupLayer = mapVars.findLayerByName('DetectionRunImages');
                    if (detectionRunImagesGroupLayer) {
                        detectionRunImagesGroupLayer.getLayers().clear();
                    }

                    var extent = ol.extent.createEmpty();

                    response.data.forEach(function (detectionRun,index) {   
                        if (detectionRunImagesGroupLayer) {
                            var layers = detectionRunImagesGroupLayer.getLayers().getArray();
                            var exitingLayer = layers.find(function (layer) {
                                return layer.get('imgId') === detectionRun.detectionInputImage.id;
                            });
                            
                            if (!exitingLayer) {
                                const source = new ol.source.GeoTIFF({
                                    sources: [
                                        {
                                            url: detectionRun.detectionInputImage.imagePath
                                        },
                                    ],
                                });

                                var newLayer = new ol.layer.WebGLTile({
                                    source: source,
                                    name: detectionRun.detectionInputImage.name,
                                    imgId: detectionRun.detectionInputImage.id,
                                    projection: mapVars.projection,
                                    title: detectionRun.detectionInputImage.name,
                                    order: index + 1,
                                    visible: true
                                })

                                detectionRunImagesGroupLayer.getLayers().push(newLayer);
                                detectionRunImagesGroupLayer.set('displayInLayerSwitcher', true);
                            }
                            
                        }
                        if (detectionRun.detectedDumpSites && detectionRun.detectedDumpSites.length > 0) {
                            var vectorSource = new ol.source.Vector(); 

                            detectionRun.detectedDumpSites.forEach(function (dumpSite) {
                                var geoJsonObj = JSON.parse(dumpSite.geoJson);
                                var olGeoJson = new ol.format.GeoJSON();
                                var feature = olGeoJson.readFeature(geoJsonObj, {
                                    dataProjection: mapVars.projection,
                                    featureProjection: mapVars.projection
                                });
                                var confRate = dumpSite.confidenceRate * 100;
                                vectorSource.addFeature(feature);
                                if(dumpSite.isInsideIgnoreZone === true){
                                    feature.setStyle(new ol.style.Style({
                                    fill: new ol.style.Fill({
                                        color: 'rgba(82, 78, 183, 0.5)'
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: 'blue',
                                        width: 2 
                                    }),
                                    text: new ol.style.Text({
                                        font: '14px Calibri,sans-serif',
                                        fill: new ol.style.Fill({ color: '#000' }),
                                        stroke: new ol.style.Stroke({
                                            color: '#fff', width: 2
                                        }),
                                        text: "Confidence rate:\n" + confRate.toFixed(0).toString() + "%"
                                    })
                                }));
                                }else{
                                    feature.setStyle(new ol.style.Style({
                                    fill: new ol.style.Fill({
                                        color: 'rgba(255, 0, 0, 0.5)'
                                    }),
                                    stroke: new ol.style.Stroke({
                                        color: 'red',
                                        width: 2 
                                    }),
                                    text: new ol.style.Text({
                                        font: '14px Calibri,sans-serif',
                                        fill: new ol.style.Fill({ color: '#000' }),
                                        stroke: new ol.style.Stroke({
                                            color: '#fff', width: 2
                                        }),
                                        text: "Confidence rate:\n" + confRate.toFixed(0).toString() + "%"
                                    })
                                }));
                                }
                            });

                            var vectorLayer = new ol.layer.Vector({
                                source: vectorSource,
                                title: detectionRun.name,
                                order: index + 1,
                                visible: true                               
                            });
                           
                            historicDataLayerGroup.getLayers().push(vectorLayer);
                            ol.extent.extend(extent, vectorSource.getExtent());
                        }
                    });
                    if (!ol.extent.isEmpty(extent)) {
                        mapVars.map.addLayer(historicDataLayerGroup);
                        mapVars.map.getView().fit(extent, mapVars.map.getSize());
                    }else{
                        Swal.fire({
                            text: '@DbResHtml.T("There are no dump sites  to show for the selected detection runs", "Resources")',
                            icon: "warning"
                        });
                    }
                   
                }
            },
            error: function (req, status, error) {
                Swal.fire({
                    text: '@DbResHtml.T("Error occured", "Resources")',
                    icon: "error"
                });
            }
        });
    }

    function generateDetectionRunsTable() {
        $.ajax({
            type: "GET",
            url: "@Url.Action("GetAllDetectionRuns", "Detection", new { Area = "IntranetPortal" })",
            success: function (data) {
                var detectionRunsTable = "";
                if (data.length == 0) {
                    detectionRunsTable +=
                        `<table class='table table-striped table-bordered table-hover mt-4'>
                        <thead>
                            <tr>
                                <th>@DbResHtml.T("Name", "Resources")</th>
                                <th>@DbResHtml.T("Created By", "Resources")</th>
                                <th>@DbResHtml.T("Created On", "Resources")</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                               <td colspan="4" class="text-center">@DbResHtml.T("No data available.", "Resources")</td>
                            </tr>
                        </tbody>
                     </table>
                    `
                } else {
                    detectionRunsTable +=
                        `<table class='table table-striped table-bordered table-hover mt-4' id='historicDataDetectionRunsTable'>
                        <thead>
                            <tr>
                                <th hidden></th>
                                <th>@DbResHtml.T("Name", "Resources")</th>
                                <th>@DbResHtml.T("Load detections above - confidence rate (%)", "Resources")</th>
                                <th>@DbResHtml.T("Created On", "Resources")</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                    `;
                    data.forEach(function (item) {
                        var checked = item.id === '@Model' ? "checked" : "";
                        detectionRunsTable +=
                            `<tr>
                            <td hidden>${item.id}</td>
                               <td style="max-width: 200px; word-wrap: break-word; white-space: normal;">${item.name}</td>
                            <td>
                               <input class="conf_rate_slider" id="conf_rate_range_${item.id}" type="text" name="conf_rate_range_${item.id}" value="">
                            </td>
                                   <td>${new Date(item.createdOn).toLocaleDateString('en-GB').replace(/\//g, '.')}</td>
                            <td>
                               <div class="form-group clearfix">
                                    <div class="icheck-dark mt-3 text-bold">
                                        <input type="checkbox" id="editDatasetImageEnabledInput_${item.id}" name="editDatasetImageEnabledInput_${item.id}" ${checked}>
                                        <label for="editDatasetImageEnabledInput_${item.id}"></label>
                                    </div>
                               </div>
                            </td>
                         </tr>
                        `
                    });

                    detectionRunsTable += `</tbody></table>`;
                    detectionRunsTable +=
                        `<div class="text-center">
                        <a onclick="triggerShowOnMap()" id="showOnMapBtn" class="mr-2 btn bg-gradient-success"  title="@DbResHtml.T("Show on map", "Resources")">@DbResHtml.T("Show on map", "Resources")</a>
                        <div class="btn-group">
                            <button type="button" class="btn  bg-gradient-info">Reports</button>
                            <button type="button" class="btn  bg-gradient-info dropdown-toggle dropdown-icon" data-toggle="dropdown">
                                 <span class="sr-only">Toggle Dropdown</span>
                            </button>
                            <div class="dropdown-menu" role="menu">
                               <a onclick="triggerAreaComparisonAvgConfidenceRate()" id="showAreaComparisonAvgConfidenceRateModalBtn" class="dropdown-item btn">@DbResHtml.T("Area comparison", "Resources")</a>
                            </div>
                        </div>
                    </div>
                    `;
                }
              
                $("#map-sidebar-historicdatatable-tab-container").html(detectionRunsTable);
                $('.conf_rate_slider').ionRangeSlider({
                    min: 0,
                    max: 100,
                    from: 50,
                    type: 'single',
                    step: 1,
                    postfix: '%',
                    prettify: false,
                    hasGrid: true
                });

                var modelId = '@Model';
                if (modelId) {
                    $('#historicDataDetectionRunsTable tbody tr').each(function () {
                        var id = $(this).find('td:first').text().trim();
                        if (id === modelId) {
                            $(this).find('input[type="checkbox"]').prop('checked', true);
                        }
                        triggerShowOnMap();
                    });                  
                }
            },
            error: function (req, status, error) {
                Swal.fire({
                    text: '@DbResHtml.T("Error occured", "Resources")',
                    icon: "error"
                });
            }
        });
    }
        
    function generateAreaComparisonAvgConfidenceRateModal() {
        var modalHtml = `<div class="modal fade" id="areaComparisonAvgConfidenceRateModal" tabindex="-1" aria-labelledby="areaComparisonAvgConfidenceRateModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header bg-gradient-info">
                        <h5 class="modal-title" id="areaComparisonAvgConfidenceRateModalLabel">Area Comparison</h5>
                        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body" id='areaComparisonAvgConfidenceRatemodalBody'>
                        <div id="confRateSlider" class="card p-3 bg-light">
                            <div class="w-75">
                                 <label>@DbResHtml.T("Generate report above the selected confidence rate (%)", "Resources")</label>
                                 <input class="conf_rate_slider" id="conf_rate_aria_comparison_report" type="text" name="conf_rate_aria_comparison_report" value="">
                            </div>
                            <div class="mt-3">
                                <button onclick="generateAreaComparisonAvgConfidenceRateReport()" class="btn btn-sm bg-gradient-danger">
                                    <i class="fas fa-search"></i>
                                    Generate report
                                </button>
                            </div>
                        </div>
                        <div id="areaComparisonReportTable" class="mt-5"></div>
                    </div>
                </div>
              </div>
            </div>`
        $('body').append(modalHtml);
        $('.conf_rate_slider').ionRangeSlider({
            min: 0,
            max: 100,
            from: 50,
            type: 'single',
            step: 1,
            postfix: '%',
            prettify: false,
            hasGrid: true
        });
        $('#areaComparisonAvgConfidenceRateModal').css('z-index', '2000');
        $("#areaComparisonAvgConfidenceRateModal").modal("show");
    }

    function getSelectedDetectionRunIds() {
        let selectedDetectionRunsIds = [];
        $('#historicDataDetectionRunsTable tbody tr').each(function () {
            if ($(this).find('input[type="checkbox"]').prop('checked')) {
                var id = $(this).find('td:first').text().trim();
                selectedDetectionRunsIds.push(id);
            }
        });
        return selectedDetectionRunsIds;
    }

    function getSelectedConfidenceRates() {
        let selectedConfidenceRates = [];
        $('#historicDataDetectionRunsTable tbody tr').each(function () {
            if ($(this).find('input[type="checkbox"]').prop('checked')) {

                var id = $(this).find('td:first').text().trim();
                var sliderInput = $(this).find('td').eq(2).find('input.conf_rate_slider');

                if (sliderInput.length > 0) {
                    var sliderInstance = sliderInput.data("ionRangeSlider");
                    if (sliderInstance) {
                        var conf_rate = sliderInstance.result.from;
                        selectedConfidenceRates.push({
                            detectionRunId: id,
                            confidenceRate: conf_rate
                        });
                    }
                }
            }
        });

        return selectedConfidenceRates;
    }


</script>
